<img src="{{ target_user.profile.image.url }}" alt="" style="height: 12rem; width: 12rem; border-radius: 20rem; margin-bottom: 2rem; object-fit: cover;">

object-fit: cover 이 부분은 사진 형태가 스타일에 세팅된 비율에 안맞을 때 원본 사진을 살짝 잘라서 비율에 맞게 크기 조정된 사진이 원본과 심하게 다르지 않게 

<div style="text-align: center; margin: 1rem 0;">
    {% if page_obj.has_previous %}
    <a href="{% url 'articleapp:list' %}?page={{ page_obj.previous_page_number }}"
       class="btn btn-secondary rounded-pill">
        {{ page_obj.previous_page_number }}
    </a>
    {% endif %}
    <a href="{% url 'articleapp:list' %}?page={{ page_obj.number }}"
       class="btn btn-secondary rounded-pill active">
        {{ page_obj.number }}
    </a>
    {% if page_obj.has_next %}
    <a href="{% url 'articleapp:list' %}?page={{ page_obj.next_page_number }}"
       class="btn btn-secondary rounded-pill">
        {{ page_obj.next_page_number }}
    </a>
    {% endif %}
</div>

위의 pagination.html은 href 가 article:list 전용으로 되있다. 

<div style="text-align: center; margin: 1rem 0;">
    {% if page_obj.has_previous %}
    <a href="?page={{ page_obj.previous_page_number }}"
       class="btn btn-secondary rounded-pill">
        {{ page_obj.previous_page_number }}
    </a>
    {% endif %}
    <a href="?page={{ page_obj.number }}"
       class="btn btn-secondary rounded-pill active">
        {{ page_obj.number }}
    </a>
    {% if page_obj.has_next %}
    <a href="?page={{ page_obj.next_page_number }}"
       class="btn btn-secondary rounded-pill">
        {{ page_obj.next_page_number }}
    </a>
    {% endif %}
</div>

이렇게 바꾸면 어떤 페이지에서든 쓸 수 있다.

게시글 디테일 페이지 안에서 코멘트를 보여줄 때 html에서 이렇게 했다
->
            {% for comment in target_article.comment.all %}
                {% include 'commentapp/detail.html' with comment=comment %}
            {% endfor %}
 
하지만 이렇게 템플릿 안에서 특정 객체들을 모두 가져오는 방식은 템플릿 안에서 복잡성을 높여주고 다른 조건을 걸어 여러가지 작업을 하고 싶은 경우 한계가 있다
때문에 프로젝트 디테일 페이지에서 프로젝트에 속한 게시글들을 보여줄 대는 Mixin을 사용해보자
MultipleObjectMixin을 사용한다 -> 여러가지 오브젝트를 다룰 수 있게 하는 mixin이다 

질문 파이썬 클래스에서 클래스가 두개의 클래스를 동시에 상속 받을 때 어떤 것을 먼저 상속 받는지 어떻게 알아?
Chatgpt :
파이썬에서 클래스는 여러 개의 다른 클래스를 상속받을 수 있습니다. 다중 상속의 경우, 상속받은 클래스들의 메소드나 속성이 충돌할 경우 메서드 해상도 순서(Method Resolution Order, MRO)라는 규칙에 따라 어떤 클래스의 메소드를 사용할지 결정됩니다.

MRO는 클래스의 상속 순서에 따라 결정됩니다. 파이썬에서는 상속된 클래스들을 검색하는 순서를 계산하기 위해 C3 알고리즘을 사용합니다. C3 알고리즘은 상속 그래프에서 각 클래스가 다른 클래스보다 먼저 처리되는 순서를 계산하고, 모든 클래스가 정의된 메서드를 일관되게 처리할 수 있는 순서를 찾습니다.

Python 2에서는 MRO를 확인하기 위해 __mro__ 속성을 사용할 수 있었지만 Python 3부터는 mro() 메소드를 사용합니다. 이 메소드는 클래스의 MRO를 튜플 형태로 반환합니다.

따라서, 클래스가 두 개의 클래스를 동시에 상속받았을 때 어떤 클래스를 먼저 상속받는지는 MRO를 통해 확인할 수 있습니다.

-> CBV 나 Mixin을 상속할 때도 마찬가지다. 
Not all mixins can be used together, and not all generic class based views can be used with all other mixins. Here we present a few examples that do work; if you want to bring together other functionality then you’ll have to consider interactions between attributes and methods that overlap between the different classes you’re using, and how method resolution order will affect which versions of the methods will be called in what order.

->super()
https://www.programiz.com/python-programming/methods/built-in/super

class ProjectDetailView(DetailView, MultipleObjectMixin):
    model = Project
    context_object_name = 'target_project'
    template_name = 'projectapp/detail.html'

    paginate_by = 25

    def get_context_data(self, **kwargs):
        object_list = Article.objects.filter(project=self.get_object())
        return super(ProjectDetailView, self).get_context_data(object_list=object_list, **kwargs)

-> 여기서 get_context_data는 DetailView와 MultipleObjectMixin이 둘 다 가지고 있다. 그런데 지금 DetailView, MultipleObjectMixin 순서로 상속 받으므로 우선 DetailView의
get_context_data 를 호출한 다음 MultipleObjectMixin의 get_context_data를 호출한다. 내 생각에는 ..... DetailView의 get_context_data는에는 object_list라는 키워드 패러미터가 없
으므로 get_context_data(object_list=object_list, **kwargs) 이런 식으로 호출 됬을 때도 그냥 기존의 DetailView 의 오리지널 get_context_data가 호출 된것과 똑같고 결과 
context_object_name인 target_project라는 변수명으로 해당 프로젝트 객체다 템플릿에 전달된다. 하지만 MultipleObjectMixin의 get_context_data에는 object_list라는 키워드패러미터가 
존재하고 때문에 super(ProjectDetailView, self).get_context_data(object_list=object_list, **kwargs) 이렇게 호출 될 때 object_list가 우리 템플릿에 전달되어 화면으로 나오는것이다.







