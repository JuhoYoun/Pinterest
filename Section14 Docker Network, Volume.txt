지금 장고 컨테이너는 제대로 돌아가고 있으니 거기에 nginx 컨테이너를 꽃아주면 된다 nginx쪽 설정을 좀 바꿔줘야한다
먼저 유저가 웹사이트에 요청을 보낸다하고 그 흐름을 따라가보자 유저가 컨테이너가 있는 VPS 즉 가상서버의 80번 포트로 요청을 보낸다 VPS의 80번 포트는 nginx 컨테이너의 80번 포트와 연결되어있다
여기서 이 nginx 컨테이너가 유저의 리퀘스트를 다시 장고 컨테이너로 보내줘야한다 그러면 nginx 컨테이너에서 장고 컨테이너로 요청을 보낼 땐 어떻게 할까? IP address? Domain? 이것을 해결해주는 도구가 Docker Network!

Docker Network
하나의 네트워크로 여러개의 도커 컨테이너를 묶어준다 예를들어 장고 컨테이너와 nginx 컨테이너가 도커 네트워크로 묶어있다고 하면 각 컨테이너의 이름을 마치 도메인 처럼 사용하여 컨테이터에서 컨테이너로 요청을 주고 받을 수 있다
nginx 컨테이너에서 http://django_container_gunicorn:8000 이런식으로 장고 컨테이너로 요청을 보낼 수 있다

일단 portainer 컨테이너 빼고 기존의 nginx와 django 컨테이너 다 지워주자 강의에서 다시 할게 있어서 지우라 그랬다 portainer에서 network로 가서 네트워크를 만들어보자 -> Add Network
name은 nginx-django 라고 해주고 나머지는 건드릴 필요없다 create network 눌러서 만들어주자

그리고 컨테이너를 만들어주자 우선 django_image_gunicorn:1 이미지를 이용해 django_container_gunicorn을 만드는데 유저의 요청을 nginx 컨테이너에서 먼저 받고 이 장고 컨테이너로 넘겨줄거기 때문데 포트 설정이 필요없다
그리고 네트워크를 설정해준다 Network 탭을 누르고 가서 Network 항목에 방금 만든 nginx-django을 선택한다 그리고 Deploy! 

그리고 nginx 컨테이너를 만들어야되는데 그 전에 nginx 설정 파일을 만들어야한다 내 컴퓨터의 프로젝트 루트로 가서 nginx.conf 파일을 만들어준다 안에 내용은 gunicorn에서 제공하는 베이스를 좀 가저오자
-> https://gunicorn.org/#deployment

  server {
    listen 80;
    server_name example.org;
    access_log  /var/log/nginx/example.log;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }
  
이 코드를 다음과 같이 바꿔주자
  
worker_processes auto;

events {
}
http {
    server {
        listen 80;

        location / {
            proxy_pass http://django_cntainer_gunicorn:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}

같은 네트워크 안에서는 컨테이너 이름을 통해 요청을 줄 수 있다 -> proxy_pass http://django_cntainer_gunicorn:8000;   django 컨테이너의 8000번 포트로 요청을 보낸다
listen 80;   -> nginx 기본 80으로 요청을 보내기 때문이다

이 nginx.conf 파일을 FileZilla라는 소프트웨어를 이용해 VPS 로 보내주자 ssh로 VULTR 서버에 접속했던것과 비슷하다 호스트에 ip를 그리고 username과 password를 입력해준다 그리고 22번 포트를 사용한다
가상서버에 home 밑에 django_course 라고 만들고 그 안에 nginx.conf 파일을 옮겨주자

자 이제 nginx 컨테이너를 만들어주자 이름은 nginx 그리고 nginx:latest 이미지를 사용하고 80:80 이렇게 포트를 연결해주자 네트워크도 nginx-django 로 선택해준다
그리고 volume 이라는것을 사용할건데 Volumes 으로 가서 volume mapping 에 container에는 /etc/nginx/nginx.conf 라고 쓰고 bind 선택 그리고 host에는 /home/django_course/nginx.conf 라고 써주고 writable 선택해준다
-> 컨테이너 내부와 가상서버의 파일을 연결해주는것이다
마지막으로 deploy 눌러서 컨테이너를 만든다

그러면 http://45.77.85.86/  이 주소로 가보면 장고 웹사이트를 볼 수 있다 포트 넘버를 같이 입력할 필요 없다 http 요청의 기본 포트는 80번이고 80번의 nginx 가 8000번의 장고 컨테이너로 연결시켜주기 때문이다
지금도 보면 정적파일이 제대로 업로드되있지 않아 웹사이트가 엉망이다


Static Files

초기에 웹 서버들은 html 파일들만 정적으로 제공해주는 그런 서버였다 유저가 특정 html 파일을 요청하면 그 파일만 응답해줬다 그런데 이런 static 한 파일들만 이용해 웹을 구축하면 파일들이 너무 많아지게된다 그래서 static 뿐만아니라
동적으로 컨텐츠를 생산할 수 있는 (dynamic) 방향으로 발전하게된다 장고 템플릿 변수, for 문 if문 등이 그 예이다 
원래는 서버가 동적인 컨텐츠와 정적인 부분을 모두 만들어 요청을 보낸 유저에게 되돌려줬다 하지만 시간이 지나며 동적인 컨텐츠가 복잡해지자 동적인 컨텐츠를 따로 빼 애플리케이션에서 만들었다
즉 유저가 서버에 static 파일을 요청하게 되면 서버단에서 바로 응답을 되돌려줄 수 있다 그리고 유저가 서버에 dynamic 컨텐츠를 요청하면 서버에서 애플리케이션으로 다시 요청을 보내 동적인 컨텐츠를 받아온 후 유저에게 되돌려준다
여기서 서버는 nginx 가 되고 application은 장고가 된다

Why gunicorn /django cannot serve static files?
gunicorn과 django 조합은 dynamic한 컨텐츠를 제공하기 위한 조합이다

그러면 장고 소스에 있는 static 파일들을 어떻게 해아하나?
1. Collect static content from django container
2. Synchronize static content with nginx container

내 컴퓨터의 프로젝트 루트로 가서 python manage.py collectstatic
staticfiles라는 폴더에 정적 파일들이 모여진다 이것을 nginx랑 연결시켜줘야한다 일단 내 로컬에 staticfiles 폴더는 지워주고 Dockerfile로 가자

RUN python manage.py migrate 다음에
RUN python manage.py collectstatic 추가해준다

이 Dockerfile을 이용해 새로운 이미지를 





  
  
  
  
  
  
  
