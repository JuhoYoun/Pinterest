reverse() vs reverse_lazy
reverse 의 리턴값은 함수의 parameter로 사용할 수 있지만 클래스의 parameter로 사용할 수는 없다. 하지만 reverse_lazy는 클래스의 parameter로 사용가능하다.

질문 How can I use Django CreateView?

Chatgpt 답:

Django's CreateView is a class-based view that provides an easy way to create a new object in a model. To use CreateView in your Django project, you can follow these steps:

Define your model: First, define the model for which you want to create the form. For example, let's say you have a model named Book with fields title, author, and publication_date.

Define the form: Next, define a form class for your model. You can use Django's built-in ModelForm to create a form based on your model. For example, create a form class named BookForm that is based on the Book model:

python
Copy code
from django import forms
from .models import Book

class BookForm(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['title', 'author', 'publication_date']
Define the view: Create a CreateView class that extends the django.views.generic.edit.CreateView class. In this class, you need to specify the model, form, and success URL to redirect after creating a new object.

python
Copy code
from django.views.generic.edit import CreateView
from django.urls import reverse_lazy
from .models import Book
from .forms import BookForm

class BookCreateView(CreateView):
    model = Book
    form_class = BookForm
    success_url = reverse_lazy('book_list')
Add URL mapping: Add a URL mapping to map the BookCreateView to a URL. You can use Django's url function or path function to create the URL mapping. For example:

python
Copy code
from django.urls import path
from .views import BookCreateView

urlpatterns = [
    path('book/create/', BookCreateView.as_view(), name='book_create'),
]
Create a template: Create a template for the form. By default, Django's CreateView uses a template named modelname_form.html. So, for our Book model, create a file named book_form.html in your app's templates directory.

html
Copy code
{% extends "base.html" %}

{% block content %}
<h1>Create Book</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Create</button>
</form>
{% endblock %}
That's it! You can now navigate to /book/create/ in your web browser to see the form and create a new Book object.

When you submit the form, Django will create a new Book object with the data entered in the form and redirect to the success URL specified in the BookCreateView class.


질문. How can I use Django LoginView?

Chatgpt 답:
Django's LoginView is a class-based view that provides an easy way to implement a login page in your Django project. To use LoginView in your Django project, you can follow these steps:

Add the authentication URLs: In your project's urls.py file, include Django's built-in authentication URLs by adding the following code:

python
Copy code
from django.contrib.auth import views as auth_views

urlpatterns = [
    # ... other URL patterns ...
    path('accounts/login/', auth_views.LoginView.as_view(), name='login'),
    path('accounts/logout/', auth_views.LogoutView.as_view(), name='logout'),
]
This code will map the /accounts/login/ URL to the LoginView and the /accounts/logout/ URL to the LogoutView.

Create a login template: Create a template for the login page. By default, Django's LoginView uses a template named registration/login.html. So, create a file named login.html in your app's templates/registration directory.

html
Copy code
{% extends "base.html" %}

{% block content %}
<h2>Login</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Login</button>
</form>
{% endblock %}
That's it! You can now navigate to /accounts/login/ in your web browser to see the login form.

When a user submits the form, Django will authenticate the user and redirect them to the URL specified in the next query parameter (if present) or to the success_url attribute of the LoginView (if defined).

By default, Django uses the django.contrib.auth.forms.AuthenticationForm form class for the login form. You can customize this form by creating a subclass of AuthenticationForm and specifying it in the form_class attribute of the LoginView. For example:

python
Copy code
from django.contrib.auth.forms import AuthenticationForm

class CustomLoginForm(AuthenticationForm):
    # add custom form fields or validation

from django.contrib.auth.views import LoginView

class CustomLoginView(LoginView):
    form_class = CustomLoginForm
    template_name = 'custom_login.html'
    success_url = '/'
Then, add the CustomLoginView to your URL patterns:

python
Copy code
urlpatterns = [
    # ... other URL patterns ...
    path('accounts/login/', CustomLoginView.as_view(), name='login'),
    # ... other URL patterns ...
]
And create a custom_login.html template in your app's templates directory.


간단히 만든 Login 기능으로 로그인하면 /account/profile 로 redirect 되는것을 볼 수 있다 (profile 페이지를 안만들어놔서 처음에 에러가 났다)
Login redirect 메카니즘은 우선 LoginView 에서 next 라는 속성 값이 있나 확인한다. 있으면 next 값으로 redirect 되고 없으면 다음으로는 settings.py의 LOGIN_REDIRECT_URL 이라는 변수값을
찾는다. 설정되어있다면 그 주소로 가게되고 그것도 없으면 default로 /profile 로 redirect 되는것이다.


Form design adjustment with Bootstrap
강의에서는 django-bootstrap4 를 사용하지만 나는 django-bootstrap5 를 사용하겠다. 
-> https://django-bootstrap5.readthedocs.io/en/latest/installation.html
이거 보고 설치하자

<input type="submit" class="btn btn-primary rounded-pill col-6 mt-3">
-> col-6 은 부모 태그의 너비를 12 로 봤을 때 6만큼의 너비를 가져간다는 의미다. mt-3 는 margin top 3배 라는 의미로 현재 탑 마진을 3배로 늘린다는 의미다.

이번엔 네이버 폰트를 직접 다운 받아서 써보자 -> https://hangeul.naver.com/font
원하는 폰트를 다운받아서 BASE_DIR/static/fonts 경로에 넣어준다. fonts 디렉토리 없으니까 만들어준다. 우리는 otf 파일만 쓰자. (open type font)
otf vs ttf -> https://m.blog.naver.com/oppun/221888199636
그리고 <head> 태그 안에 다음과 같이 추가해준다.
<style>
    @font-face {
        font-family: 'NanumSquareRoundOTFB';
        src: local('NanumSquareRoundOTFB'),
        url("{% static 'fonts/NanumSquareRoundOTFB.otf' %}") format("opentype");
    }
    @font-face {
        font-family: 'NanumSquareRoundOTFEB';
        src: local('NanumSquareRoundOTFEB'),
        url("{% static 'fonts/NanumSquareRoundOTFEB.otf' %}") format("opentype");
    }
    @font-face {
        font-family: 'NanumSquareRoundOTFL';
        src: local('NanumSquareRoundOTFL'),
        url("{% static 'fonts/NanumSquareRoundOTFL.otf' %}") format("opentype");
    }
     @font-face {
        font-family: 'NanumSquareRoundOTFR';
        src: local('NanumSquareRoundOTFR'),
        url("{% static 'fonts/NanumSquareRoundOTFR.otf' %}") format("opentype");
    }
</style>

이렇게 하면 다운받은 폰트를 사용할 수 있다.


Account 앱의 AccountDetailView 에서는 특정 유저의 정보를 보는것이므로 계정의 primary key (pk)가 필요하다.
accountapp 의 urls.py 에 다음과 같이 추가 -> path('detail/<int:pk>', AccountDetailView.as_view(), name='detail'),

class AccountDetailView(DetailView):
    model = User
    context_object_name = 'target_user' # 인자로 넘겨 받은 pk와 일치하는 Model (여기선 User) 객체를 target_user 란 변수로 템플릿에 넘겨준다
    template_name = 'accountapp/detail.html'
   
인자로 넘겨진 pk는 target_user를 위해 필요하다

{% extends 'base.html' %}
{% load django_bootstrap5 %}

{% block content %}
    <div>
        <div style="text-align: center; max-width: 500px; margin: 4rem auto;">
            <p>
                <!--{{ user.date_joined }} 이렇게 쓰면 항상 내 정보만 나온다  -->
                {{ target_user.date_joined }}
            </p>
            <h2 style="font-family: 'NanumSquareRoundOTFEB';">
                <!--{{ user.username }} 이렇게 쓰면 항상 내 정보만 나온다  -->
                {{ target_user.username }}
            </h2>
        </div>
    </div>
{% endblock %}

위과 같이 target_user 란 이름으로 모델 객체가 넘어왔다.


UpdateView 를 써서 유저 정보를 업데이트할 때는 기존의 유저 생성시 사용했던 UserCreationForm 을 사용하면 업데이트 가능하지 않아야하는 유저 ID 까지 업데이트가 가능해서 다른 폼을 사용해야한다.
accountapp에서 forms.py 라는 파일을 새로 만들어서 이곳에 앞으로 사용할 form들을 만들자. UserCreationForm 을 상속받아 커스터마이징한 새로운 폼을 만들자.

Understanding Python super() with __init__() methods -> https://www.i2tutorials.com/python-super-with-__init__-methods/#:~:text=The%20%E2%80%9C__init__%E2%80%9D%20is,the%20base%20class%20name%20explicitly.

The super() function allows us to avoid using the base class name explicitly. In Python, the super() function is dynamically called as unlike other languages, as it is a dynamic language. The super() function returns an object that represents the parent class.

