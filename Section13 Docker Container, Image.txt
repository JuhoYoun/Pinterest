Image라는 것을 어디서 가져올까? -> 우리가 직접 만들수도 있고 여러가지 방법이 있긴한데 우리는 Dockerhub라는것을 사용할것이다 우리가 올리는 Image뿐만 아니라 여러 기업들의 Image가 올라가있다
이 Imagae들을 받아 새로운 Image를 만들거나 새로운 container를 만드는 등 활용할 수 있다
첫번째 이미지로 portainer라는 소프트웨어다 이것은 docker를 GUI로 바꿔주는 소프트웨어이다 dockerhub에서 portainer 공식 image를 가져워 우리의 가상서버에 portainer container를 만들것이다

dockerhub에 가서 portainer로 검색 portainer-ce 버전을 받자 (community edition) -> portainer-ce 클릭 -> deploy container
뭔 일 있는지 페이지 에러 뜬다 ㅋㅋ 그냥 여기로 -> https://docs.portainer.io/start/install-ce/server/docker/linux

docker volume create portainer_data
docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest

이 두 커맨드로 설치하면 된다 근데 여기서 두번째 커맨드의 -p 8000:8000 이 부분은 지워주자 8000번 포트를 사용한다는건데 우리는 9443 포트만 쓴다

docker ps -> 실행되있는 container 보여준다
docker restart portainer -> portainer 컨테이너를 재시작한다

https://localhost:9443  localhost 는 VULTR 가상서버 ip 주소 -> 이렇게 하면 웹브라우저에서 접근 가능하다 
local -> container 를 보면 portainer 이미지를 이용한 컨테이너 하나가 구동중인것을 확인할 수 있다
 
port 
포트라는 개념은 서버와 통신할 때 사용한다 VULTR는 포트들을 가진 하나의 가상 서버이고 VULTR안의 portainer 컨테이너도 하나의 시스템이다 그러므로 portainer에도 포트가 존재한다
https://localhost:9443 이런식으로 브라우저를 통해 portainer에 접근을 하려면 VULTR의 포트와 portainer의 포트와 연결시켜주는 작업이 필요하다
-p 9443:9443  이 부분이 VULTR의 9443과 portainer의 9443 포트를 연결한다는 의미이다 이렇게 웹브라우저를 통해 VULTR 내부의 portainer 컨테이너와 통신이 가능하다

port 80
HTTP protocol
웹브라우저에 google.com 이런식으로 아무런 포트를 스지 않고 입력하면 한번 80번 포트로 연결되게 되어있다

NGINX
NGINX 소픝웨어를 도커허브에서 이미지를 가져와 실재 컨테이너를 만들어볼것이다 위에 설명한것과 같이 포트를 연결해보자 portainer GUI에서 한번 해보자
container list를 가보자 -> add container 
name은 원하는대로 쓰고 image에 nginx라고 입력 그리고 Always pull the image 클릭
Manual network port publishing -> publish a new network port 
host 80 container 80
그리고 Deploy the container 눌러주자 컨테이너가 생성된다 -> https://localhost:80 으로 가면 nginx welcome 페이지를 볼 수다

다음에는 Django 컨테이너를 만들거다 nginx 처럼 공식 이미지가 있는것이 아니라 우리의 소스를 넣어야된다
Django 컨테이너를 만드는 과정은 다음과 같다
1. Upload source to Github
2. Write Dockerfile -> 이미지를 만드는 설계서
3. Build Image
4. Run Container

일단 Github에 가서 새로운 repository를 하나 생성한다 생성시 나오는 화면에 우리가 만든 소스코드를 어떻게 이 레포지토리에 올리는지 설명이 나와있다

…or push an existing repository from the command line
git remote add origin https://github.com/JuhoYoun/My-Home.git
git branch -M main
git push -u origin main

이걸 이용하자

chatgpt:

이 명령어들은 GitHub에 새로운 Git repository를 만들고, 로컬에서 작성한 코드를 원격 저장소로 push하는 과정입니다.

git remote add origin https://github.com/JuhoYoun/My-Home.git: 새로운 Git repository를 생성하고 원격 저장소 URL을 설정합니다.
git branch -M main: Git branch를 새로 만들고, 기존의 main branch를 새로운 branch로 이름을 변경합니다.
git push -u origin main: 변경된 로컬 브랜치를 원격 저장소의 main 브랜치에 push합니다. -u 옵션은 이후에 push할 때 기본으로 원격 저장소의 main 브랜치로 push 하도록 설정하는 것입니다.
이 과정을 마치면 GitHub의 원격 저장소에 코드가 업로드되어 공개됩니다.

branch이름을 master에서 main으로 바꾸게됬는데 최근에 master라고 쓰는것을 지양하는것 

error message :
User
remote: Support for password authentication was removed on August 13, 2021.
remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.
fatal: Authentication failed for 'https://github.com/JuhoYoun/My-Home.git/'

Chatgpt:
이 오류는 2021년 8월 13일 이후로 GitHub에서 암호 인증 지원을 중단했기 때문에 발생합니다. 대신에 개인 액세스 토큰(Personal Access Token)을 사용해야 합니다.

해결 방법:

GitHub 계정으로 로그인하고 오른쪽 상단에 있는 프로필 아이콘을 클릭합니다.
드롭다운 메뉴에서 'Settings'를 선택합니다.
왼쪽 메뉴에서 'Developer settings'를 선택하고, 'Personal access tokens'을 선택합니다.
'Generate new token' 버튼을 클릭합니다.
토큰 이름을 입력하고 권한을 선택합니다.
'Generate token' 버튼을 클릭합니다.
생성된 토큰 값을 안전한 장소에 보관합니다.
터미널에서 git clone, push, pull 등을 수행할 때, HTTPS URL 대신에 액세스 토큰을 사용합니다.
예시:

shell
Copy code
$ git clone https://github.com/username/repo.git
Username: your_username
Password: your_token


우리는 처음에 파이참 환경을 구축할 때 가상 환경을 만들었고 그 안에 관련 패키지를 넣었다
pip list -> 지금까지 가상환경에 깔았던 패키지들이 나온다 이 패키지들은 우리가 새로 만드는 장고 컨테이너에도 깔아줘야한다 때문에 이 패키지들에 대한 정보를 남겨야한다
-> pip freeze > requirements.txt
이러면 패키지들 정보가 requirements.txt에 담긴다 이것도 git commit 해주자 그리고 git push

Dockerfile = how to make an image
어떤 os를 이용해 어떤 내용을 설치할것이고 그 내용에서 어떤 환경을 설정을 바꿔줄지에 등등에 대한 모든 설정이 dokerfile 안에 들어간다

dockerfile command 
FROM
RUN
WORKDIR
EXPOSE
CMD

FROM
-> Select Base Image 베이스 이미지를 무엇을 쓸지 정해주는 커맨드
클래스가 기존의 클래스를 상속받아 새로운 클래스를 만들 수 있는것처험 이미지도 기존의 이미지를 상속받아 새로운 이미지를 만드는것이 가능하다

RUN
-> 말그대로 커맨드를 실행시켜준다는 의미
 pip list, pip install 이런 커맨드들을 run과 함께 마치 리눅스를 명령어를 사용하는것처럼 쓴다?
 
 WORKDIR
 -> 리눅스 커맨드 cd랑 비슷하다 차이점은 WORKDIR은 무조건 절대경로인듯

EXPOSE
-> 컨테이너에서 어떤 포트를 사용할 수 있도록 노출시켜준다 이것을 노출시켜 외부의 VULTR의 가상서버의 포트와 연결시킬수 있도록 한다

CMD
-> 장고 컨테이너를 만드는것이 다가아니고 안에서 서버가 돌아가야한다 nginx와 portainer 같은 경우도 우리가 다른 커맨드를 쓰지 않았음에도 지들이 알아서 돌아간다 이렇게 하려면 기본 캐맨드를 설정해야한다
cmd에 다가 이 장고 컨테이너가 실행될 때마다 실행되야되는 기본 커맨드를 넣어줄것이다 
예를 들어 python manage.py runserver 0.0.0.0:8000 (사실 나중에 nginx랑 연동하면 이거 말고 다른 명령어를 쓴다)


Write Dockerfile
일단 우리 프로젝트 루트에다 dockerfile 파일을 새로 만들어준다
FROM 구문을 이용해 base image를 선택하는데 애초에 파이썬이 깔려있는 image를 base image로 사용하여 파이썬을 까는 과정을 생략할것이다
dockerhub에 가서 python 검색 클릭해 들어가고 tags 로 가면 파이썬 3.9.0이 있는것이 보일것이다 (나는 로컬에서 3.8.9로 한거 같은데... 그냥 여기선 3.9.0으로 가보자)
Dockerfile 에 다음과 같이 쓰자

FROM python:3.9.0   ->  Dockerhub에서 python 3.9.0 짜리 이미지를 가져와 베이스 이미지로 쓴다

질문 Docker 컨테이너는 그만의 개별적인 디렉토리 시스템을 가지고 있나?
Chatgpt:
Docker 컨테이너는 개별적인 파일 시스템을 가집니다. 이 파일 시스템은 호스트 시스템과 분리되어 있으며, 컨테이너 내부에서만 사용할 수 있습니다. Docker는 이 파일 시스템을 컨테이너 이미지의 레이어로 관리하며, 이미지는 서로 다른 컨테이너에서 공유될 수 있습니다. 이를 통해 컨테이너 간에 완전한 분리를 유지하면서도 애플리케이션을 배포하고 실행할 수 있습니다.

질문 컨테이너는 home이라는 디렉토리가 있어?
Chatgpt:
컨테이너에 디렉토리 구조는 컨테이너의 이미지가 가지고 있는 파일 시스템에 따라 결정됩니다.

일반적으로 컨테이너 이미지는 운영 체제와 관련된 루트 디렉토리와 기본 디렉토리 구조를 가지고 있습니다. 대부분의 경우, 컨테이너 내부에서 home 디렉토리가 있으며, 일반적으로 사용자의 홈 디렉토리로 설정됩니다.

하지만 이것은 이미지의 설정 및 운영 체제에 따라 다를 수 있습니다. 따라서 컨테이너 내부의 파일 시스템 구조를 확인하기 위해서는 해당 이미지에 대한 문서 또는 도커 이미지 내부를 확인해야 합니다.

WORKDIR /home/  -> docker 컨테이너의 개별적인 파일 시스템을 가지고 대개 처음 만들면 home이라는 디렉토리가 있다 이 디렉토리를 working directory로 만들어준다

RUN git clone https://github.com/JuhoYoun/My-Home.git  ->  이 working directory에다가 장고 소스코드를 가져온다

WORKDIR /home/MY-HOME/  ->  소스코드를 가져오면 MY-HOME이라는 디렉토리가 생기기 때문에 이 디렉토리를 working directory로 바꿔준다

RUN pip install -r requirements.txt  -> 이 디렉토리에 필요한 패키지들을 설치해준다

RUN python manage.py migrate  -> sqlite3 파일은 gitignore에 들어가 있다 때문에 db와 연동해 sqlite3 파일을 다시 만들어준다

EXPOSE 8000 -> 8000번 포트를 열어준다

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"] -> 장고 컨테이너가 생성될 때마다 실행되는 커맨드, 리스트형태로 써준다


그런데 이렇게 Dockerfile 을 작성해줘도 웹사이트가 실행되지 않을것이다 현재 .env 파일이 없다 (SECRET_KEY 를 불러와야한다) .env 파일은 gitignore에 포함되어있다

일단은 임시로 .env 파일을 만들어주자 이건 나중에 고칠거다 마이그레이션 하기 전에 .env 파일을 만드는 커맨드를 쓰자
-> RUN echo "SECRET_KEY=django-insecure--5ej32jnwnzn%jv$gb)z@=e1c@(lvtha!1&o9o9%2z4p4_n16s" > .env

자 이젠 portainer로 가서 이미지를 생성해보자 local -> images -> build a new images -> upload -> select files -> dockerfile 선택
그리고 컨테이너 이름을 django_container_image:1 이라고 해주자 그리고 build the image
이미지를 처음 만들 때 시간이 좀 걸린다 나중에 살짝 이미지를 바꾸고 다시 만들면 훨씬 빠르다







