핀터레스트 같은 게시글들의 카드형 같은 레이아웃을 만들기 위해 Javascript 라이브러리인 MagicGrid를 살펴보자.
-> https://github.com/e-oj/Magic-Grid

https://jsfiddle.net/eolaojo/4pov0rdf/
-> 여기서(JSFIDDLE) MagicGrid 를 시뮬레이션할 수 있다

articleapp 을 만들어주고 urls.py 에 일단 TemplateView를 이용해서 테스트해보자

from django.urls import path, include
from django.views.generic import TemplateView

urlpatterns = [
    path("lists/", TemplateView.as_view(template_name='articleapp/list.html'), name='list'), # Django에서 기본적으로 제공해준다. 우리가 Template만 지정해주면 나머지는 다 만들어준다
]

그리고 list.html에 위의 JSFIDDLE 에 있는거처럼 html, css, Javascript를 써줘야한다. 그런데 Javascript는 MagicGrid를 구성하는 부분이 JSFIDDLE에 없어서 MagicGrid 기텁에 가서 
dist 디렉토리의 magic-grid.cjs.js 파일의 내용을 복사해 우리 프로젝트의 static/js/magicgrid.js 경로에 넣어준다. 이 때 복사한 코드의 맨 마지막 줄에 있는 module.exports = MagicGrid;
이 부분은 장고가 아닌 다른 프레임웤에 쓰는 부분이므로 필요가 없어서 없애주자 그리고 JSFIDDLE에 있던 javascript 코드도 magicgrid.js 파일 맨 밑에 넣어준다.

list.html 코드는 다음과 같다

{% extends 'base.html' %}
{% load static %}

{% block content %}
<style>
    .container div {
      width: 250px;
      background-color: antiquewhite;
      display: flex;
      justify-content: center;
      align-items: center;
      border-radius: 1rem;
    }

</style>

<div class="container">
  <div class="item1">1</div>
  <div class="item2">2</div>
  <div class="item3">3</div>
  <div class="item4">4</div>
  <div class="item5">5</div>
  <div class="item6">6</div>
  <div class="item7">7</div>
  <div class="item8">8</div>
  <div class="item9">9</div>
  <div class="item10">10</div>
  <div class="item11">11</div>
  <div class="item12">12</div>
  <div class="item13">13</div>
</div>

<script src="{% static 'js/magicgrid.js' %}"></script>
{% endblock %}


Lorem Picsum -> https://picsum.photos/

https://picsum.photos/200/300 이런식으로 url에 원하는 이미지 사이즈를 같이 데이터로 넘겨주면 랜덤한 이미지를 보내준다. item 1 에만 사진을 추가해보자. 그리고 해당 페이지를 가보면 
레이아웃이좀 이상하다. 사진이 로딩 되는 시간이 있어서 그런것이다. 현재 container 안의 div 태그는 높이가 따로 설정되있지 않다. 이상적으로는 div 태그 안의 사진의 높이에 맞춰 레이아웃이 되야 하는데 
사진 로딩 시간이 있기 때문에 사진이 로딩되기 전에 레이아웃이 완성되고 그 위에 사이즈가 맞지 않는 이미지가 덮어진것이다. 

magicgrid.js 파일에 magicGrid.listen(); 라인  다음을 추가하자

var masonrys = document.getElementByTagName("img")

for (let i = 0; i < masonrys.length; i++) {
    masonrys[i].addEventListener('load', function() {
        magicGrid.positionItems();
    }, false)
}

masonry는 벽돌 형태로 엊비슷하게 쌓아올라간다는 뜻. 위의 코드의 의미는 다큐먼트의 모든 img 엘리먼트에 대해 해당 이미지가 로드 되었을 때 MagicGrid를 다시 포지셔닝 하라는 이벤트 리스너를 추가하는것이다.

articleapp 만드는것은 이전 앱들과 비슷해서 노트 안했다.

우리가 지금까지 만든 account나 article 디테일뷰 같은 경우 단일 객체만 볼 수 있으면 되었다. account는 한 유저의 정보 article 같은 경우 그 한 article 의 정보만 보면 됬다. 우리는 최종적으로
게시판 형태를 만들어야 하는데 이를 위해서는 여러개의 객체(object)를 다룰 수 있는 뷰가 필요하다. -> List view 가 필요하다.


