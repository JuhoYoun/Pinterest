이번에는 컨테이너만 사용해서 배포했을 때 어떤 문제와 한계점이 있는지 짚어보고 그에 대한 해결을 어떻게 할건지 알아보자  

문제
1. Repetitive configuration -> 컨테이너를 배포할 때 마다 설정을 반복적으로 해야한다
2. Container shutdown -> 어떠한 이유로 컨테이너가 꺼졌을 때 문제가 된다

우선 예를 들어 이미지를 조금 바꿔주고 컨테이너를 다시 만들어야할 때마다 포트 볼륨 네트워크 등등 설정을 다시해가며 컨테이너를 다시 만드는것은 반복적이고 비효율적인 일이다
그래서 각 컨테이너의 세팅들을 하나의 파일에 모아줄거다 -> Docker Stack
이 stack 을 사용해서 컨테이너들을 한꺼번에 배포해볼것이다
stack과 비슷하게 docker compose가 있긴한데 이건 배포용이 아니라 로컬에서 컨테이너들을 관리하기 위함이다 

컨테이너가 모종의 이유로 다운되었다고 가정해보자 그럼 그 컨테이너를 리부팅 시켜야한다 그런데 누가 하느냐? 그래서 컨테이너들을 service 라는 상위 개념으로 격상 시켜서 관리할것이다
서비스가 하는것이 뭔가? 만약 장고 컨테이너가 문제가 생겼다고 하면 우리가 만들었던 설정 파일을 불러와서 해당 컨테이너를 자동으로 재부팅 시켜준다 추가적으로 서비스의 장점은 지금은 장고 컨테이너가 컨테이너 하나로 구성을 했는데 
서비스 안에서는 컨테이너를 필요에따라 여러개로 늘릴수 있다 -> scale out이 가능하다 장고 쪽에 더 많은 컴퓨팅 파워가 필요하다 하면 컨테이너를 여러개 만들 수 있고 더 자세하게 들어가면 어 컴퓨터의 자원도 어느정도 사용하게 만들지 설정 가능하다
이 내용들도 Stack 파일에 넣을것이다 (YML 파일)

이 Stack 이 어디에서 구동되는가? Docker Swarm

Docker System 을 포함하고 있는 가상 서버를 Node 라고 한다 여러개의 Node가 있을 수 있는데 이 여러가지 서버를 하나의 서버 하나의 서비스처럼 이용할 수 있게 묶어주는것이(clustering) Swarm 이라고 보면 된다 
위에서 장고 쪽에 더 많은 컴퓨팅 파워가 필요할 시 컨테이너를 여러개 만들 수 있다고 했는데 Node를 여러개 만들어 그 안에 각각 장고 컨테이너도 여러개 만들어 컨테이너 개수를 늘린다는 의미이다 
이와 같이 여러개의 노드에 여러개의 컨테이너가 있으면 이 각 컨테이너들을 다 설치라고 설정하고 연결하는 것이 정말 복잡한 일이지만 Swarm이 쉽게 해준다 우리가 만든 서비스가 돌아가는 바닥이 swarm이다 
이것을 container orchestration 이라고 한다 이런 orchestration 툴로는 구글에서 만든 kubernetes나 apache mesos 등이 있다 우리가 docker swarm을 쓰는 이유는 쉬워서이다 kubernetes는 정말 기능이 많고 복잡하고 
우리가 생각하는 모든것을 구현할 수 있다면 docker swarm은 핵심적인 기능만 모아놨다 
강의에서는 하나의 Node만 사용할것이다 

자 이제 swarm, stack를 이용해서 컨테이너를 만들어보자 일단 돌아각고 있는 모든 컨테이너들을 portainer 빼고 지워주자 그리고 시작하기 앞서 docker swarm mode를 켜줘야한다 강의에서 쓰이는 portainer 버전에서는 안된다 때문에 portainer를 
통해서가 아니라 직접 서버에 접속해서 해줘야한다 
-> ssh root@45.77.85.86
그리고 아래의 디렉토리로 이동하자
-> cd /home/django_course
여기에 swarm을 시작해준다 
-> docker swarm init
그러면 스웜이 시작된다 아래는 메세지이다
Swarm initialized: current node (prg338amwyuz6fn4j23ob8cc0) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-2wejo8jywdrn1gdpvcj0a2zxwtt14c7aa4zp0v5q7ha78gadc4-7ik19ll1da7c9jgs27rm4cnna 45.77.85.86:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

그리고 브라우저를 통해 portainer로 가보면 기존에 없던 swarm secret service 탭들이 생긴걸 볼 수 있다 스웜모드가 켜진것이다 

자 이제 yml 파일을 써주자 일단 우리 프로젝트 루트 가서 docker_compose.yml 이라는 파일을 만들어주자
그리고 다음과 같이 써준다

version: "3.7"
services:
  django:
    image: django_test_image:3
    ports:
      - 8000:8000
      
version은 docker compose 버전을 의미하는데 강의에서는 3.7 버전을 사용하였다 더 최신 버전도 있지만 이 때 portainer가 지원하는 최신 버전이 3.7이란다
그리고 servies 를 지정해줬다 위에서는 django라는 서비스를 만들어줬다 여기서 쓰인 이미지는 내 docker에는 없는 이미지이고 강의에서 쓰인 이미지인데 파일형 데이터베이스를 쓰는 이미지아다 그리고 호스트와 컨테이너 포트를 연결해줬다
강의에서는 여기까지 하고 테스트를 해본다 스택을 만들어보자 portainer 가서 stack 탭으로 간다 add stack 이름은 django_stack이라고 하고 upload 를 선택한다 그리고 우리가 만든 만든 yml 파일을 올려준다 그리고 바로 디플로이! 
그러면 스택이 생긴다 그리고 service 탭으로 가보자 django_stack_django라는 서비스가 생겼다 yml 파일에서 django_stack을 스택으로 하고 서비스 이름이 django여서 이렇게 생겼나보다
replicated는 이 장고 컨테이너를 몇개 만들건지에 대한 설정이다 published ports를 보면 yml에 나온대로 8000:8000 으로 되어있다 그런데 여기서 잠깐 컨테이너로 가보면 생성된 장고 컨테이너에는 포트가 설정되어있지 않고 바로 이 서비스에 설정 되
있는것을 볼 수 있다 컨테이너가 관리하지 않고 서비스단에서 관리해준다
swarm 탭에 가보면 장고서비스가 구동되고 있다는 것을 볼 수 있다 또 재밌는것을 해본다면 service 탭에 가서 replicated 옆에 scale 버튼 누르면 컨테이너 개수를 뿔릴 수 있다 그리고 컨테이너를 들어가보면 컨테이너 개수가 늘어난것을 볼 수 있다
지금은 노드가 하나라서 swarm 탭에 들어가보면 한 노드 안에 복제된 컨테이너들이 모두 구동되고 있는것을 볼 수 있는데 만약 노드가 여러개라면 이 컨테이너들을 분산시켜 주는것도 도커가 알아서 해준다 우리가 설정할 수도 있다

자 이번엔 진짜 우리가 쓸 yml 파일을 써보자 

version: "3.7"
services:
  nginx:
    image: nginx:1.25.0
    networks:
      - jake_home_network
    volumes:
      - /home/django_course/nginx.conf:/etc/nginx/nginx.conf
      - jake_home_static:/data/static
      - jake_home_media:/data/media
    ports:
      - 80:80
  django_container_gunicorn:
    image: django_image_gunicorn:1
    networks:
      - jake_home_network
    volumes:
      - jake_home_static:/home/My-Home/staticfiles
      - jake_home_media:/home/My-Home/media
  mariadb:
    image: mariadb:10.5
    networks:
      - jake_home_network
    volumes:
      - jake_home_database:/var/lib/mysql
    environment:
      MARIADB_ROOT_PASSWORD: Teddy2020!!!!
      MARIADB_DATABASE: django_homepage
      MARIADB_USER: jake
      MARIADB_PASSWORD: Teddy2020!!!!

networks:
  jake_home_network:

volumes:
  jake_home_static:
  jake_home_media:
  jake_home_database:
  
일단 nginx 버전은 이전까지는 latest라고 썼지만 1.25.0으로 버전을 특정했다. 네트워크 같은 경우에 yml을 통해 만들어진 네트워크는 지정해준 이름 앞에 스택 이름이 접두사처럼 들어가게된다. 네트워크를 통해서 서비스들을 엮어준다. 
(이전에는 컨테이너 끼리 엮었는데... 이렇게 되면 컨테이너는 어차피 서비스 안에 있으니 컨테이너 끼리도 엮은게 되는듯)
네트워크와 볼륨은 우리가 이전에 했던 방식으로 설정해줬다. 단 네트워크랑 네임드 볼륨 이름을 좀 바꿔주었다.

자 이제 이 yml을 기반으로 스택을 배포해보자 배포 버튼을 누르고 배포가 완료되기 까지는 시간이 걸린다 일단 Services 탭으로 가보자 마리아 db 서비스 말고 다른 서비스는 replicated 0/1 이렇게 뜬다 마리아디비 컨테이너는 켜졌는데
장고와 nginx 컨테이너느 안켜졌다 왜 이럴까? 마이라디비 서비스는 배포 완료했고 다른건 하는중이다
컨테이너 탭에 들어가보자 장고 컨테이너와 nginx 컨테이너가 하나가 아닌 여러개가 있는데 모두 stopped 라고 되있다 잠시 뒤 배포가 끝난 후 Services 탭에 가보면 모든 서비스가 정상적으로 돌아가고 있고
컨테이너를 가보면 여전히 복제된 장고 컨테이너와 nginx 컨테이너가 많지만 running 하는 장고 컨테이너와 nginx 컨테이너 모두 생성되었다 왜 이럴까?
장고 컨테이너는 구동중인 마리아디비 컨테이너가 있어야 구동이 가능하고 nginx 컨테이너는 구동중인 장고 컨테이너가 있어야 구동이 가능하다 마리아디비 컨테이너 생성이 끝나기전의 장고 컨테이너 생성 시도는 구동되지 않는 장고 컨테이너를 생성하는데 
그치고 nginx 때도 마찬가지이다 이렇게 컨테이너 생성 시도 시 생성 불가능한 경우 컨테이너를 생성하지 않는 옵션도 있는데 이건 강의에서 안가르쳐주네

다음 강의에서는 secret 을 통해서 swarm 내에서 보안 관련한 것들을 어떻게 관리하는지 알아보자 

#######################################
질문 : portainer 에서 yml 파일을 올려 stack 을 만들 때 서비스나 컨테이너 이름들이 스택의 이름을 접두사로 가지지 않게 하려면 어떻게 해야해?

Chatgpt 답:

Portainer에서 YML 파일을 사용하여 스택을 생성할 때, 서비스나 컨테이너 이름들이 스택의 이름을 접두사로 가지지 않도록 설정하려면 YML 파일에서 deploy 섹션의 labels 옵션을 사용할 수 있습니다.

예를 들어, 스택의 이름이 "my-stack"이고 서비스의 이름이 "web"인 경우, labels 옵션을 사용하여 컨테이너의 이름을 직접 설정할 수 있습니다. 아래는 YML 파일의 예시입니다:

yaml
Copy code
version: '3.8'
services:
  web:
    image: nginx
    container_name: my-web-container
    deploy:
      labels:
        - "com.docker.stack.namespace="
위의 예시에서 com.docker.stack.namespace 라벨을 빈 값으로 설정함으로써 서비스나 컨테이너 이름에 스택의 이름을 접두사로 가지지 않도록 할 수 있습니다. 이렇게 설정하면 서비스의 이름은 "web"이지만 컨테이너의 이름은 "my-web-container"가 됩니다.

이와 같이 YML 파일에서 deploy 섹션과 labels 옵션을 사용하여 서비스 또는 컨테이너의 이름을 직접 지정하면 스택의 이름과 관계없이 원하는 이름을 사용할 수 있습니다.
##########################################

##########################################
질문 : When creating volumes or networks using yml file, network names or volume names are prefixed by stack name. How can I prevent this ?

Chat gpt:
When creating volumes or networks using a YAML file in Portainer, network names or volume names are automatically prefixed with the stack name by default. This is a feature of Portainer to ensure uniqueness and avoid conflicts between different stacks.

If you want to prevent the stack name from being used as a prefix for network or volume names, you can use the external option. By specifying the external option, you can create a network or volume outside of the stack and then reference it within the stack.

Here's an example of how you can define an external network or volume in your YAML file:

For a network:

yaml
Copy code
networks:
  my-network:
    external: true
For a volume:

yaml
Copy code
volumes:
  my-volume:
    external: true
By setting external: true, you indicate that the network or volume is external to the stack, and Portainer will not prefix the stack name to it. Make sure that the external network or volume already exists before using it in your stack.

Using the external option allows you to create shared resources that can be used across multiple stacks without the stack name prefix.
###########################################

근데 위처럼 chatgpt 가 하란대로 했는데 잘 안되네?? 뭐가 문제지....


일단 다음으로 넘어가자 

Docker Secret
비밀스런 정보를 따로 관리헤주는 도커 기능 
장고 시크릿키나 마리아디비 루트 패스워드, 패스워드등을 docker env 또는 yml 파일등에서 보지 못하고 도커 시크릿을 통해 관리되고 필요한 컨테이너나 서비스에 제공되게 하자 

일단 바로 시크릿을 만들어보자 portainer 에서 바로 secrets 탭으로 가서 add secret 
name 에다가 DJANGO_SECRET_KEY 그리고 secret 에다가는 Dockerfile 를 통해 env 안에 써놓은 django-insecure--5ej32jnwnzn%jv$gb)z@=e1c@(lvtha!1&o9o9%2z4p4_n16s 이 키를 넣는다 그리고 create secret 눌러 생성한다
이렇게 되면 앞으론 도커 시크릿에서 장고 시크릿을 가져올것이니 dockerfile 에 RUN echo "SECRET_KEY=django-insecure--5ej32jnwnzn%jv$gb)z@=e1c@(lvtha!1&o9o9%2z4p4_n16s" > .env   이 라인은 지워도 된다
추가적으로 MARIADB_ROOT_PASSWORD 와 MARIADB_PASSWORD 도 시크릿 키를 만들어준다 

자 그럼 이 시크릿을 yml 파일과 장고의 deploy.py 파일에 어떻게 제공해줘야할까?
yml 에서는 다음과 같이 제공한다 
->
version: "3.8"
services:
  nginx:
    image: nginx:1.19.5
    container_name: nginx
    networks:
      - network
    volumes:
      - /home/django_course/nginx.conf:/etc/nginx/nginx.conf
      - static:/data/static
      - media:/data/media
    ports:
      - 80:80
    deploy:
      labels:
        - "com.docker.stack.namespace="
  django_container_gunicorn:
    image: django_image_gunicorn:1
    container_name: django_container_gunicorn
    networks:
      - network
    volumes:
      - static:/home/My-Home/staticfiles
      - media:/home/My-Home/media
    deploy:
      labels:
        - "com.docker.stack.namespace="
    secrets:
      - DJANGO_SECRET_KEY
      - MARIADB_PASSWORD
  mariadb:
    image: mariadb:10.5
    container_name: mariadb
    networks:
      - network
    volumes:
      - database:/var/lib/mysql
    secrets:
      - MARIADB_ROOT_PASSWORD
      - MARIADB_PASSWORD
    environment:
      MARIADB_DATABASE: django_homepage
      MARIADB_USER: jake
      MARIADB_ROOT_PASSWORD_FILE: /run/secrets/MARIADB_ROOT_PASSWORD
      MARIADB_PASSWORD_FILE: /run/secrets/MARIADB_PASSWORD
    deploy:
      labels:
        - "com.docker.stack.namespace="

networks:
  network:

volumes:
  static:
  media:
  database:

secrets:
  DJANGO_SECRET_KEY:
    external: true
  MARIADB_ROOT_PASSWORD:
    external: true
  MARIADB_PASSWORD:
    external: true

도커허브에서 마리아디비 공식 이미지를 들어가게 되면 다음과 같이 도커 시크릿 설정에 관한 글이 있다 

##################
Docker Secrets
As an alternative to passing sensitive information via environment variables, _FILE may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container. In particular, this can be used to load passwords from Docker secrets stored in /run/secrets/<secret_name> files. For example:

$ docker run --name some-mysql -e MARIADB_ROOT_PASSWORD_FILE=/run/secrets/mysql-root -d mariadb:latest
Currently, this is only supported for MARIADB_ROOT_PASSWORD, MARIADB_ROOT_PASSWORD_HASH, MARIADB_ROOT_HOST, MARIADB_DATABASE, MARIADB_USER, MARIADB_PASSWORD and MARIADB_PASSWORD_HASH (and MYSQL_* equivalents of these).
#####################

위를 참고해서 마리아디비 부분을 쓰자
시크릿은 사실 파일로 제공된다 /run/secrets/MARIADB_ROOT_PASSWORD 이런 경로로 파일이 생겨서 시크릿을 불러오게 되는것이다 

  DJANGO_SECRET_KEY:
    external: true
    
external 이건 외부에서 공급받는다는 뜻인데 이 yml 파일로 만들어지는 시크릿이 아니라 이미 만들어져 있는 시크릿을 공급받는다는 의미이다

자 이제 소스코드의 deploy.py 를 바꿔주자 
다음의 함수를 만들어준다 

def read_secret(secret_name):
    file = open('/run/secrets/' + secret_name)
    secret = file.read()
    secret = secret.rstrip().lstrip()
    file.close()
    return secret

마리아디비 도커허브에서 봤듯이 컨테이너의 '/run/secrets/' + secret_name 이 경로에 시크릿 파일이 생기기 때문에 이 파일을 불러오는것이다 

그리고 이 라인을 
SECRET_KEY = env('SECRET_KEY')
이렇게 바꿔준다 
SECRET_KEY = read_secret('DJANGO_SECRET_KEY')

이 부분도 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_homepage',
        'USER': 'jake',
        'PASSWORD': 'Teddy2020!!!!',
        'HOST': 'mariadb',
        'PORT': '3306',
    }
}
이렇게 바꾼다 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_homepage',
        'USER': 'jake',
        'PASSWORD': read_secret('MARIADB_PASSWORD'),
        'HOST': 'mariadb',
        'PORT': '3306',
    }
}

그리고 Dockerfile을 조금 더 고쳐줘야한다 
도커파일의
RUN python manage.py collectstatic
이 부분을 보자 내 생각에 이 전 강의에서 RUN python manage.py collectstatic --settings=pinterest.settings.deploy 이렇게 했어야했는데 강사가 안한거 같다 (안해도 결과는 똑같다 이 경우에는)
어쨌든 지금 현재 도커 시크릿에서 장고 시크릿 키를 가져오는걸로 했기 때문에 이 라인은 없애주고 이 라인을 CMD 쪽으로 보내줘야한다 왜냐하면 이 라인이 실행되는 동안은 아직 컨테이너가 생성중인것이다 시크릿파일들은 컨테이너가 
생성 완료된 후 생성되기 때문에 이렇게 해서는 deploy.py에서 방금 우리가 만든 read_secret 으로 시크릿 파일을 불러올 수 없다 아직 없기 때문이다 이 라인을 CMD 로 옮기자 
->
CMD ["bash", "-c", "python manage.py collectstatic --noinput --settings=pinterest.settings.deploy && python manage.py migrate --settings=pinterest.settings.deploy && gunicorn pinterest.wsgi --env DJANGO_SETTINGS_MODULE=pinterest.settings.deploy --bind 0.0.0.0:8000"]

배포환경에서는 python manage.py 명령어를 쓸 때 항상 --settings=pinterest.settings.deploy 이렇게 세팅을 설정해줘야한다 
--noinput 이  의미는 우리가 static 파일을 수집할 때 가끔 묻는 창이 뜰 때가 있는데 이 때 인풋을 넣지 않고 그냥 알아서 가져오라는 뜻이다 

자 그러면 해당 내용들을 git commit 그리고 push 하고 장고 이미지를 다시 만들어주고 스택도 지우고 다시 만들어주자 잘된다!

    






