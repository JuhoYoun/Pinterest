이번에는 컨테이너만 사용해서 배포했을 때 어떤 문제와 한계점이 있는지 짚어보고 그에 대한 해결을 어떻게 할건지 알아보자  

문제
1. Repetitive configuration -> 컨테이너를 배포할 때 마다 설정을 반복적으로 해야한다
2. Container shutdown -> 어떠한 이유로 컨테이너가 꺼졌을 때 문제가 된다

우선 예를 들어 이미지를 조금 바꿔주고 컨테이너를 다시 만들어야할 때마다 포트 볼륨 네트워크 등등 설정을 다시해가며 컨테이너를 다시 만드는것은 반복적이고 비효율적인 일이다
그래서 각 컨테이너의 세팅들을 하나의 파일에 모아줄거다 -> Docker Stack
이 stack 을 사용해서 컨테이너들을 한꺼번에 배포해볼것이다
stack과 비슷하게 docker compose가 있긴한데 이건 배포용이 아니라 로컬에서 컨테이너들을 관리하기 위함이다 

컨테이너가 모종의 이유로 다운되었다고 가정해보자 그럼 그 컨테이너를 리부팅 시켜야한다 그런데 누가 하느냐? 그래서 컨테이너들을 service 라는 상위 개념으로 격상 시켜서 관리할것이다
서비스가 하는것이 뭔가? 만약 장고 컨테이너가 문제가 생겼다고 하면 우리가 만들었던 설정 파일을 불러와서 해당 컨테이너를 자동으로 재부팅 시켜준다 추가적으로 서비스의 장점은 지금은 장고 컨테이너가 컨테이너 하나로 구성을 했는데 
서비스 안에서는 컨테이너를 필요에따라 여러개로 늘릴수 있다 -> scale out이 가능하다 장고 쪽에 더 많은 컴퓨팅 파워가 필요하다 하면 컨테이너를 여러개 만들 수 있고 더 자세하게 들어가면 어 컴퓨터의 자원도 어느정도 사용하게 만들지 설정 가능하다
이 내용들도 Stack 파일에 넣을것이다 (YML 파일)

이 Stack 이 어디에서 구동되는가? Docker Swarm

Docker System 을 포함하고 있는 가상 서버를 Node 라고 한다 여러개의 Node가 있을 수 있는데 이 여러가지 서버를 하나의 서버 하나의 서비스처럼 이용할 수 있게 묶어주는것이(clustering) Swarm 이라고 보면 된다 
위에서 장고 쪽에 더 많은 컴퓨팅 파워가 필요할 시 컨테이너를 여러개 만들 수 있다고 했는데 Node를 여러개 만들어 그 안에 각각 장고 컨테이너도 여러개 만들어 컨테이너 개수를 늘린다는 의미이다 
이와 같이 여러개의 노드에 여러개의 컨테이너가 있으면 이 각 컨테이너들을 다 설치라고 설정하고 연결하는 것이 정말 복잡한 일이지만 Swarm이 쉽게 해준다 우리가 만든 서비스가 돌아가는 바닥이 swarm이다 
이것을 container orchestration 이라고 한다 이런 orchestration 툴로는 구글에서 만든 kubernetes나 apache mesos 등이 있다 우리가 docker swarm을 쓰는 이유는 쉬워서이다 kubernetes는 정말 기능이 많고 복잡하고 
우리가 생각하는 모든것을 구현할 수 있다면 docker swarm은 핵심적인 기능만 모아놨다 
강의에서는 하나의 Node만 사용할것이다 

자 이제 swarm, stack를 이용해서 컨테이너를 만들어보자 일단 돌아각고 있는 모든 컨테이너들을 portainer 빼고 지워주자 그리고 시작하기 앞서 docker swarm mode를 켜줘야한다 강의에서 쓰이는 portainer 버전에서는 안된다 때문에 portainer를 
통해서가 아니라 직접 서버에 접속해서 해줘야한다 
-> ssh root@45.77.85.86
그리고 아래의 디렉토리로 이동하자
-> cd /home/django_course
여기에 swarm을 시작해준다 
-> docker swarm init
그러면 스웜이 시작된다 아래는 메세지이다
Swarm initialized: current node (prg338amwyuz6fn4j23ob8cc0) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-2wejo8jywdrn1gdpvcj0a2zxwtt14c7aa4zp0v5q7ha78gadc4-7ik19ll1da7c9jgs27rm4cnna 45.77.85.86:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

그리고 브라우저를 통해 portainer로 가보면 기존에 없던 swarm secret service 탭들이 생긴걸 볼 수 있다 스웜모드가 켜진것이다 

자 이제 yml 파일을 써주자 일단 우리 프로젝트 루트 가서 docker_compose.yml 이라는 파일을 만들어주자
그리고 다음과 같이 써준다

version: "3.7"
services:
  django:
    image: django_test_image:3
    ports:
      - 8000:8000
      
version은 docker compose 버전을 의미하는데 강의에서는 3.7 버전을 사용하였다 더 최신 버전도 있지만 이 때 portainer가 지원하는 최신 버전이 3.7이란다
그리고 servies 를 지정해줬다 위에서는 django라는 서비스를 만들어줬다 여기서 쓰인 이미지는 내 docker에는 없는 이미지이고 강의에서 쓰인 이미지인데 파일형 데이터베이스를 쓰는 이미지아다 그리고 호스트와 컨테이너 포트를 연결해줬다
강의에서는 여기까지 하고 테스트를 해본다 스택을 만들어보자 portainer 가서 stack 탭으로 간다 add stack 이름은 django_stack이라고 하고 upload 를 선택한다 그리고 우리가 만든 만든 yml 파일을 올려준다 그리고 바로 디플로이! 
그러면 스택이 생긴다 그리고 service 탭으로 가보자 django_stack_django라는 서비스가 생겼다 yml 파일에서 django_stack을 스택으로 하고 서비스 이름이 django여서 이렇게 생겼나보다
replicated는 이 장고 컨테이너를 몇개 만들건지에 대한 설정이다 published ports를 보면 yml에 나온대로 8000:8000 으로 되어있다 그런데 여기서 잠깐 컨테이너로 가보면 생성된 장고 컨테이너에는 포트가 설정되어있지 않고 바로 이 서비스에 설정 되
있는것을 볼 수 있다 컨테이너가 관리하지 않고 서비스단에서 관리해준다
swarm 탭에 가보면 장고서비스가 구동되고 있다는 것을 볼 수 있다 또 재밌는것을 해본다면 service 탭에 가서 replicated 옆에 scale 버튼 누르면 컨테이너 개수를 뿔릴 수 있다 그리고 컨테이너를 들어가보면 컨테이너 개수가 늘어난것을 볼 수 있다
지금은 노드가 하나라서 swarm 탭에 들어가보면 한 노드 안에 복제된 컨테이너들이 모두 구동되고 있는것을 볼 수 있는데 만약 노드가 여러개라면 이 컨테이너들을 분산시켜 주는것도 도커가 알아서 해준다 우리가 설정할 수도 있다

자 이번엔 진짜 우리가 쓸 yml 파일을 써보자 

version: "3.7"
services:
  nginx:
    image: nginx:1.19.5
    networks:
      - jake_home_network
    volumes:
      - /home/django_course/nginx.conf:/etc/nginx/nginx.conf
      - jake_home_static:/data/static
      - jake_home_media:/data/media
    ports:
      - 80:80
  django_container_gunicorn:
    image: django_image_gunicorn:1
    networks:
      - jake_home_network
    volumes:
      - jake_home_static:/home/My-Home/staticfiles
      - jake_home_media:/home/My-Home/media
  mariadb:
    image: mariadb:10.5
    networks:
      - jake_home_network
    volumes:
      - jake_home_database:/var/lib/mysql
    environment:
      MARIADB_ROOT_PASSWORD: Teddy2020!!!!
      MARIADB_DATABASE: django_homepage
      MARIADB_USER: jake
      MARIADB_PASSWORD: Teddy2020!!!!

networks:
  jake_home_network:

volumes:
  jake_home_static:
  jake_home_media:
  jake_home_database:



