Mixin

우리가 CreateView를 사용할 때 CreateView는 form_class 를 가지만 context_object_name는 안가진다 또 우리가 DetailView를 사용할 때 우리는 context_object_name 을 가지지만 
form_class는 안가진다. 이렇게 어떤 attribute들을 기본으로 가지고 있는지는 뷰마다 다르다. 그런데 우리가 코멘트 기능을 만들 때 이미 존재하는 코멘트들은 볼 수 있어야하고(DetailView) 거기에다가 새로
운 코멘트를 만들 수 있는 폼도 제공되어야한다. 이럴때 Mixin 이 필요하다. 이러면 FormMixin을 이용해 DetailView에는 form_class를 추가해줄 수 있다.

class Comment(models.Model):
    article = models.ForeignKey(Article, on_delete=models.SET_NULL, null=True, related_name='comment')
    writer = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='comment')

    content = models.TextField(null=False)
    created_at = models.DateTimeField(auto_now=True)

위의 모델에서 created_at은 자동 생성되고 content는 유저에게 입력을 받을거다. 그리고 article 과 writer는 서버단에서 확인을 할거다. 이를 위해 우리는 html에 hidden input을 추가할거다.
<input type="hidden" name="article_pk" value=""> -> article_pk라는 변수명으로 value 내의 값이 서버로 넘어갈것이다.

우리는 코멘트 쓸 수 있는 새로운 페이지로 가는게 아니라 게시글 페이지에 코멘트를 바로 달 수 있어야한다 -> include 
articleapp 의 detail.html로 가자 -> {% include 'commentapp/create.html' with article=target_article %} 이렇게 추가해주자

그리고 위의 추가한 hidden input의 value 값으로 <input type="hidden" name="article_pk" value="{{ article.pk }}"> 이렇게 써주면 된다.
그런데 위험요소가 있다. 브라우저에서는 value값의 조작이 가능하다. 예를 들어 댓글 달기가 막혀있는 글이 있다고 하자. 댓글 달기가 가능한 다른 글에 가서 브라우저에서 value값을 해당 댓글달기가 불가능한
글의 pk로 바꾸고 post요청을 보내면은 댓글 달기가 막혀있는 게시글에 댓글 달기가 가능할 수 있다.
