Mixin

우리가 CreateView를 사용할 때 CreateView는 form_class 를 가지만 context_object_name는 안가진다 또 우리가 DetailView를 사용할 때 우리는 context_object_name 을 가지지만 
form_class는 안가진다. 이렇게 어떤 attribute들을 기본으로 가지고 있는지는 뷰마다 다르다. 그런데 우리가 코멘트 기능을 만들 때 이미 존재하는 코멘트들은 볼 수 있어야하고(DetailView) 거기에다가 새로
운 코멘트를 만들 수 있는 폼도 제공되어야한다. 이럴때 Mixin 이 필요하다. 이러면 FormMixin을 이용해 DetailView에는 form_class를 추가해줄 수 있다.

class Comment(models.Model):
    article = models.ForeignKey(Article, on_delete=models.SET_NULL, null=True, related_name='comment')
    writer = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='comment')

    content = models.TextField(null=False)
    created_at = models.DateTimeField(auto_now=True)

위의 모델에서 created_at은 자동 생성되고 content는 유저에게 입력을 받을거다. 그리고 article 과 writer는 서버단에서 확인을 할거다. 이를 위해 우리는 html에 hidden input을 추가할거다.
<input type="hidden" name="article_pk" value=""> -> article_pk라는 변수명으로 value 내의 값이 서버로 넘어갈것이다.

우리는 코멘트 쓸 수 있는 새로운 페이지로 가는게 아니라 게시글 페이지에 코멘트를 바로 달 수 있어야한다 -> include 
articleapp 의 detail.html로 가자 -> {% include 'commentapp/create.html' with article=target_article %} 이렇게 추가해주자

그리고 위의 추가한 hidden input의 value 값으로 <input type="hidden" name="article_pk" value="{{ article.pk }}"> 이렇게 써주면 된다.
그런데 위험요소가 있다. 브라우저에서는 value값의 조작이 가능하다. 예를 들어 댓글 달기가 막혀있는 글이 있다고 하자. 댓글 달기가 가능한 다른 글에 가서 브라우저에서 value값을 해당 댓글달기가 불가능한
글의 pk로 바꾸고 post요청을 보내면은 댓글 달기가 막혀있는 게시글에 댓글 달기가 가능할 수 있다.

일단 commentapp의 create.html 모델, 뷰 등 코드를 쓴 후 commentapp의 creat.html을 include 한 article 앱의 detail 페이지로 가보자. 
Parameter "form" should contain a valid Django Form. 이렇게 에러가 뜬다. CreateView에는 form attribute이 없기 때문이다. 이 때 FormMixin을 사용해야한다.
->
class ArticleDetailView(DetailView, FormMixin):
    model = Article
    context_object_name = 'target_article'
    template_name = 'articleapp/detail.html'
    form_class = CommentCreationForm

이렇게 하면 이제 게스글에 코멘트 폼이 나온다. 그런데 아직은 코멘트를 적고 서밋 버튼을 누르면 에러가난다. 몇가지 작업을 더 추가해주자.
CommentCreateView 에 함수를 추가한다.

class CommentCreateView(CreateView):
    model = Comment
    form_class = CommentCreationForm
    template_name = 'commentapp/create.html'

    def form_valid(self, form):
        temp_comment = form.save(commit=False)
        temp_comment.article = Article.objects.get(pk=self.request.POST['article_pk'])
        temp_comment.writer = self.request.user
        temp_comment.save()

        return super().form_valid(form)

    def get_success_url(self):
        return reverse('articleapp:detail', kwargs={'pk': self.object.article.pk})

다른 부분들 역시 이전에 했던것과 비슷하니 그냥 코드를 보자.

게시글의 디테일 페이지에 등록된 코멘트들을 보여줘야되는데 이 때 article detail view를 따로 건들 필요는 없다. articleapp의 detail.html에 다음과 같이 하면 된다. 
            {% for comment in target_article.comment.all %}
                {% include 'commentapp/detail.html' with comment=comment %}
            {% endfor %}

article 객체와 코멘트 객체는 연결되 있기 때문에 이런식으로 불러올 수 있다. commentapp.detail.html은 따로 만들어줘야한다.

{% load django_bootstrap5 %} 이 부분은 include로 불러오는 html에 포함되어 있어도 include로 불려오는 html에도 쓰이면 불려오는 html에도 포함시켜줘야한다.
 
질문 CreateView의 get_success_url 메소드에서 self.object 은 어떤 모델의 객체를 의미해?

Chatgpt 답

CreateView에서 get_success_url 메소드에서 self.object는 새로운 객체가 생성되고, 저장된 후에 해당 객체를 나타냅니다. CreateView 클래스는 새로운 객체를 생성하기 때문에, self.object는 새로 생성된 객체를 의미합니다. 이 객체는 form_valid 메소드에서 생성되고, self.object로 설정됩니다. 이후 get_success_url에서 self.object를 사용하여 새로 생성된 객체의 pk를 참조할 수 있습니다. 따라서 get_success_url 메소드 내부에서 self.object를 사용하여 새로운 객체의 정보를 참조할 수 있습니다.
