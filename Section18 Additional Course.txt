AWS 과금 주의 
모든 것에 대해 돈을 내라 하고 졸라 비싸다 

추가적인 강의

1. AWS EC2 Deployment - 우리가 했던 과정을 VULTR 말고 AWS 에서 다시 해보기
2. Domain Configuration - 도메인을 사서 해당 도메인을 AWS EC2 instance 와 연결한다
3. HTTPS Configuration - HTTPS 보안 기능 
4. Github Private Repo - github repo를 private으로 돌렸을 우리가 해왔던 과정에 어떤 문제가 생기는지 ... 클론이나 그런 기능들을 하던 방식대로 사용할 수 없다
5. Like System Update - 좋아요 기능 추가 


AWS EC2 Deployment
 
VULTR의 경우 ssh로 접속할 때 id와 password를 인자로 넘겨줘 해당 서버에 접속했다 AWS에서는 보안상 PEM 같은 key file을 이용해서 서버에 접속하는것이 권장된다 (id/password 도 되긴한다)
VULTR에서는 도커가 이미 깔려있는 서버를 대여 받아 시작했지만 AWS 에는 도커가 깔려 있지 않아 직접 깔아줘야한다 
AWS도 포트가 있는데 default로 이 포트들이 방화벽으로 (firewall) 모두 막혀있다 때문에 포트를 사용해야할 때 포트를 열어주는 설정을 해줘야한다

일단 AWS 로 가서 콘솔 로그인을 한 다음 service -> EC2로 가자 
인스턴스를 만들기 이전에 key file을 먼저 만들어주자 좌측의 Network & Security 로 가서 Key pairs를 클릭 create key pair 를 누르고 pem 키를 만들어준다 이름은 맘대로 한다 
키 생성 동시에 pem 파일이 다운로드 된다 이 파일을 로컬의 프로젝트 루트 디렉토리로 옮기자 그리고 이 경로에서 ssh 접속을 할 수 있게 구축할것이다 (뭔말?)
그리고 instances 로 가서 launch instance를 누른다 ubuntu 20.0.4 를 선택 다른 것들 기본값으로 해준다 강의에서 보안 그룹 설정 단계가 포트를 관리하는 방화벽 설정 부분인데 지금 AWS 랑 다른가 보다 나한테 안보인다 
강의에서 포트는 우리가 필요할 때 마다 그 때 그 때 열어주기로 했다 키는 아까 만들었던 pem 키를 선택한다 그리고 인스턴스 시작해준다 

자 그러면 다운 받았던 pem 키를 이용해서 ssh 접속을 해보자 pem 키를 다운받았던 디렉토리로 가서 다음 명령어를 사용하낟
-> ssh -i aws_jake.pem ubuntu@54.215.96.40
ssh 로 pem 파일을 이용해 ubuntu 유저로 aws 주소로 접근한다는 의미이다 
#####
AWS EC2에서는 인스턴스에 따라 기본 사용자 이름이 다릅니다. Ubuntu 인스턴스의 경우, 기본 사용자 이름은 'ubuntu'이며, 이 계정을 통해 ssh 접속할 수 있습니다.

일반적으로 AWS EC2 인스턴스는 'root' 계정을 직접 사용하지 못하게 설정되어 있습니다. 대신, sudo 명령어를 사용하여 'ubuntu' 또는 다른 사용자 계정에서 root 권한을 얻을 수 있습니다
#####
그러면 지금은 처음 시도하는 거라서

The authenticity of host '54.215.96.40 (54.215.96.40)' can't be established.
ED25519 key fingerprint is SHA256:OOvvGghl080csg1bicigc3NpgNA511NFUAUXi5VYJBo.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? 

이렇게 메세지가 뜬다 yes 를 타입해 접속하자
강의에서는 이러면 접속 되는데 나는 아래와 같은 에러 메세지가 뜬다
#########
The authenticity of host '54.215.96.40 (54.215.96.40)' can't be established.
ED25519 key fingerprint is SHA256:OOvvGghl080csg1bicigc3NpgNA511NFUAUXi5VYJBo.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '54.215.96.40' (ED25519) to the list of known hosts.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for 'aws_jake.pem' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key "aws_jake.pem": bad permissions
ubuntu@54.215.96.40: Permission denied (publickey).
##########
##########
위의 문제에 대한 chatgpt 해결법 진짜 먹힌다

이 오류 메시지는 개인키 파일의 권한이 너무 개방적으로 설정되어 있어, AWS가 이를 안전하지 않다고 판단한 것을 나타냅니다. AWS는 이 파일이 현재 사용자에게만 읽기 권한을 부여하도록 요구합니다.

이 문제를 해결하기 위해서는 파일 권한을 변경해야 합니다. 현재 사용자만이 이 파일을 읽을 수 있도록 파일 권한을 400 또는 600으로 설정하면 됩니다.

리눅스나 MacOS에서 다음 명령어를 실행하면 이를 수행할 수 있습니다:

bash
Copy code
chmod 400 aws_jake.pem
이 명령어를 실행한 후 다시 SSH 연결을 시도해보세요. 이제 AWS EC2 인스턴스에 연결할 수 있어야 합니다.
###############

연결되면 일단 도커가 깔려 있는지 확인한다 
-> sudo docker 또는 docker
도커가 안깔려 있는걸 볼 수 있다 도커를 깔아줘야한다

#######
chat gpt
sudo docker 명령어는 Docker를 관리자 권한으로 실행하려고 할 때 사용합니다. Docker는 컨테이너 기반의 오픈소스 가상화 플랫폼입니다. Docker를 사용하면 개발환경, 라이브러리, 의존성 등을 컨테이너에 포장하여 어떤 환경에서도 동일하게 실행할 수 있습니다.

sudo docker 뒤에 다양한 서브커맨드와 옵션을 사용하여 Docker의 다양한 기능을 이용할 수 있습니다. 예를 들어:

sudo docker run: 이미지를 기반으로 새로운 컨테이너를 생성하고 실행합니다.
sudo docker ps: 현재 실행중인 컨테이너의 목록을 보여줍니다.
sudo docker pull: Docker 이미지를 다운로드합니다.
sudo docker build: Dockerfile을 기반으로 새로운 이미지를 생성합니다.
sudo docker stop: 실행중인 컨테이너를 중지합니다.
이러한 명령어를 사용하여 Docker를 이용할 수 있습니다. 도움이 필요하시면 추가 질문을 주시면 감사하겠습니다.
#######

도커 문서로 가서 어떻게 우분투에서 어떻게 도커를 설치하는지 보자 -> https://docs.docker.com/engine/install/ubuntu/
이부분을 참조하자

###########################
Install using the apt repository
Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.

Set up the repository
Update the apt package index and install packages to allow apt to use a repository over HTTPS:


 sudo apt-get update
 sudo apt-get install ca-certificates curl gnupg
Add Docker’s official GPG key:


 sudo install -m 0755 -d /etc/apt/keyrings
 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
 sudo chmod a+r /etc/apt/keyrings/docker.gpg
Use the following command to set up the repository:


 echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
Note

If you use an Ubuntu derivative distro, such as Linux Mint, you may need to use UBUNTU_CODENAME instead of VERSION_CODENAME.

Install Docker Engine
Update the apt package index:


 sudo apt-get update
Install Docker Engine, containerd, and Docker Compose.

Latest
Specific version

To install the latest version, run:


 sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
Verify that the Docker Engine installation is successful by running the hello-world image.


 sudo docker run hello-world
This command downloads a test image and runs it in a container. When the container runs, it prints a confirmation message and exits.

You have now successfully installed and started Docker Engine.

Tip

Receiving errors when trying to run without root?

The docker user group exists but contains no users, which is why you’re required to use sudo to run Docker commands. Continue to Linux postinstall to allow non-privileged users to run Docker commands and for other optional configuration steps.

Upgrade Docker Engine
To upgrade Docker Engine, follow the installation instructions, choosing the new version you want to install.
##############################

도커가 깔렸으면 이제 portainer도 깔아보자 
