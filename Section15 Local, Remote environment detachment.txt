Database detachment with MariaDB

지금은 db가 장고 컨테이너 안의 sqlite3 파일로 구동되지만 마리아 db 컨테이너를 따로 만들어 관리하도록하자 그리고 이 마리아 db 컨테이너에 볼륨을 설정해 컨테이너 유무에 상관 없이 데이터가 유지되도록 하자

그런데 이렇게 하면되면 VPS 서버(마리아db)와 내 로컬 서버(sqlite)의 환경이 다르게 된다 다시말해 local environment와 deploy environment가 달라진다 그래서 나중에 이 환경들에 대한 세팅을 분리시키는 작업이 필요하다

일단 mariadb 컨테이너를 만들자

dockerhub
-> https://hub.docker.com/_/mariadb

Starting a MariaDB instance with the latest version is simple:

$ docker run --detach --name some-mariadb --env MARIADB_USER=example-user --env MARIADB_PASSWORD=my_cool_secret --env MARIADB_ROOT_PASSWORD=my-secret-pw  mariadb:latest

이렇게 써 있다 여기 보면 env 즉 환경 변수를 설정해 줘야한다고 한다 MARIADB_USER, MARIADB_PASSWORD, MARIADB_ROOT_PASSWORD 이 변수들의 값을 설정해줘야한다

portainer로 가서 바로 컨테이너를 만들어주자 name은 mariadb라고 해주고 image에 mariadb:10.9 라고 해주자 버전을 명시하지 않으면 가장 최신것이 설치된다 그리고 Env로 가서 위의 세 변수들을 설정해주자
강의에서는 여기까지 하고 일단 컨테이너를 만들어 구동되는지 확인하였다

일단 local environmnet 설정과 deploy environment 설정을 분리 하는 작업을 한후 컨테이너를 연동하는 작업을 진행하자
소스에서 프로젝트 앱 내부의 settings.py 의 설정들을 나누어여한다 프로젝트앱 내부에 새로운 파이썬 패키지를 만들것이다 settings 라는 이름으로 만들자 그리고 settings.py를 settings 디렉토리 안에 넣고 base.py라고 바꾸자
그리고 settings 디렉토리 안에 local.py와 deploy.py를 만든다  base.py에서 개발환경이랑 배포환경이 같은 부분은 빼낼 필요 없다 하지만 다른 부분은 빼내서 local.py와 base.py로 나눠 넣어야한다

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

base.py에서 위의 내용을 잘라서 local.py에 넣어준다 그리고 맨 위에 from .base import *  이렇게 해준다 이러면 local 환경은 됬다 local.py 내용을 deploy.py로 복붙한뒤 배포환경에 맞게 바꿔주자
https://docs.djangoproject.com/en/4.1/ref/settings/#databases 여기 가보면 이렇게 써 있다

When connecting to other database backends, such as MariaDB, MySQL, Oracle, or PostgreSQL, additional connection parameters will be required. See the ENGINE setting below on how to specify other database types. This example is for PostgreSQL:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mydatabase',
        'USER': 'mydatabaseuser',
        'PASSWORD': 'mypassword',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

이를 참고해서 이렇게 만들자 

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_homepage',
        'USER': 'jake',
        'PASSWORD': 'Teddy2020!!!!',
        'HOST': 'mariadb',
        'PORT': '3306',
    }
}

mariadb 자체가 mysql에서 파생되었다 때문에 여기서 mysql 엔진을 쓴다 나중에 네트워크를 통해서 장고랑 마리아디비 컨테이너를 연결해줄것이기 때문에 HOST에는 도메인이자 컨테이너 이름인 mariadb라고 쓴다

그리고 base.py에 이 부분을 고쳐주자
BASE_DIR = Path(__file__).resolve().parent.parent -> BASE_DIR = Path(__file__).resolve().parent.parent.parent
원래 settings.py였던 base.py 위치가 바뀌었기 때문

또 manage.py도 고쳐준다
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "pinterest.settings") -> os.environ.setdefault("DJANGO_SETTINGS_MODULE", "pinterest.settings.local")
여기선 로컬환경이기 때문에 settings 디렉토리 안의 local.py를 불러와야한다

----------------------------------------------------------------
강좌 61강에 오류가 있습니다.



Docker 이미지를 만든 이후, django 컨테이너를 배포하면서
다른 설정은 만지지 않고 network 설정만 작성하고 강좌를 진행하는데,

Volume도 설정을 해주셔야 합니다.


편집과정에서 잘린건지, 저렇게만 설정해도 왜 정상적으로 작동되었는지는 저도 현재는 확인이 힘듭니다.
하지만 Nginx와 volume을 공유해야만 static 및 media 파일들을 정상적으로 요청할 수 있기 때문에, 볼륨 설정도 꼭 해주시길 바랍니다.



강좌 오류로 불편을 드려 죄송합니다!
----------------------------------------------------------------------

mariadb 컨테이너를 다시 만들기 전 볼륨을 만들자 이름을 django_homepage_database 라고 하고 만들자


자 mariadb 컨테이너를 다시 만들어보자 이름은 mariadb 이미지는 mariadb:10.9를 그대로 사용한다 그리고 네트워크로 nginx-django를 선택한다
이제 볼륨을 설정해야되는데 mariadb 도커허브를 가보자 그리고 이 부분을 읽어보자

######################################################################
Caveats
Where to Store Data
Important note: There are several ways to store data used by applications that run in Docker containers. We encourage users of the mariadb images to familiarize themselves with the options available, including:

Let Docker manage the storage of your database data by writing the database files to disk on the host system using its own internal volume management. This is the default and is easy and fairly transparent to the user. The downside is that the files may be hard to locate for tools and applications that run directly on the host system, i.e. outside containers.
Create a data directory on the host system (outside the container) and mount this to a directory visible from inside the container. This places the database files in a known location on the host system, and makes it easy for tools and applications on the host system to access the files. The downside is that the user needs to make sure that the directory exists, and that e.g. directory permissions and other security mechanisms on the host system are set up correctly.
The Docker documentation is a good starting point for understanding the different storage options and variations, and there are multiple blogs and forum postings that discuss and give advice in this area. We will simply show the basic procedure here for the latter option above:

Create a data directory on a suitable volume on your host system, e.g. /my/own/datadir.

Start your mariadb container like this:

$ docker run --name some-mariadb -v /my/own/datadir:/var/lib/mysql -e MARIADB_ROOT_PASSWORD=my-secret-pw -d mariadb:latest
The -v /my/own/datadir:/var/lib/mysql part of the command mounts the /my/own/datadir directory from the underlying host system as /var/lib/mysql inside the container, where MariaDB by default will write its data files.
#######################################################################

컨테이너 내부에서 유지해야할 데이터가 있는 경로가 나와있다 -> /var/lib/mysql 
-v /my/own/datadir:/var/lib/mysql 여기서는 바운드 볼륨으로 되있긴 한데 호스트 내에서늬 디렉토리 -> /my/own/datadir  그리고 컨테이너 내에서의 디렉토리 -> /var/lib/mysql 라는 
위의 내용을 참고해서 볼륨을을 만들 때 container 경로를 /var/lib/mysql 로 한다 volume에는 우리가 방금 만든 django_homepage_database로 설정하자

그리고 마지막으로 Env 즉 환경 변수들을 설정해줘야한다 deploy.py 의 내용에 맞게 설정해주자 mariadb dockerhub에 가면 Environment variable 리스트도 볼 수 있다

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_homepage',
        'USER': 'jake',
        'PASSWORD': 'Teddy2020!!!!',
        'HOST': 'mariadb',
        'PORT': '3306',
    }
}

MYSQL_ROOT_PASSWORD 는 적당히 만들고  MYSQL_DATABASE 에는 django_homepage  MYSQL_USER 에는 jake 그리고  MYSQL_PASSWORD 에는 Teddy2020!!!!를 쓰면 된다
그리고 컨테이너를 디플로이하자
* 나는 10.9 버전으로 할려다가 컨테이너가 잘 안만들어져서 10.5 버전으로 다시 했더니 됬다
* 나는 MYSQL_ROOT_PASSWORD MYSQL_DATABASE MYSQL_USER MYSQL_PASSWORD 말고 MARIADB_ROOT_PASSWORD MARIADB_DATABASE MARIADB_USER MARIADB_PASSWORD 를 변수명으로 사용했다 다커허브 가면 이제 이렇게 사용할 수 있다고 써있다

자 이제는 장고 컨테이너를 다시 만들어야하는데 그 전에 장고 이미지부터 다시 만들어야한다 Dockerfile을 고쳐주자

RUN python manage.py migrate 이 부분은 우리가 로컬에서 원래 파일형 db (sqlite)를 쓰고 있었기 때문에 이렇게 이미지 내에서 마이그레이트가 가능했던것이다 마리아디비 컨테이너를 사용하게 되면 이 명령어가 실행될 때는
컨테이너 생성되어 장고 컨테이너와 마이라디비 컨테이너가 연결되기 전이기 때문에 이 명령어를 쓸 수 없다 때문에 이 단계를 CMD 쪽으로 보내줘야한다
CMD ["gunicorn", "pinterest.wsgi", "--bind", "0.0.0.0:8000"]
->
CMD ["bash", "-c", "python manage.py migrate --settings=pinterest.settings.deploy && gunicorn pinterest.wsgi --env DJANGO_SETTINGS_MODULE=pinterest.settings.deploy --bind 0.0.0.0:8000"]


또 강의에서는 캐시때문에 WORKDIR /home/  뒤에 RUN echo "testing" 이라는 라인을 넣었는데 나는 그냥 기존 이미지를 다 지우고 다시 하자 





