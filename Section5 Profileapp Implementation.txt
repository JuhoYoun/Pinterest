이번엔 프로필 앱을 만들거고 model form을 사용할거다. 지금은 detail 페이지에 들어가면 계정의 ID를 볼 수 있다. 이런 정보 노출은 해킹에 취약하므로 닉네임으로 바꿔줄거다. 
User 객체와 Profile 객체를 1대1 매칭시켜줄거다. 하나의 계정엔 하나의 프로필만 존재하게 만들자. 프로필에는 이미지 닉네임 그리고 상태 메세지 이렇게 구성해주자.
프로필은 계정을 삭제할 때 그 계정 객체가 없어질 때만 같이 없어지게 설정할것이므로 delete 뷰를 따로 만들지않고 detail 뷰도 프로필은 account detail view 가 품는 형식으로 만들것이나 
따로 만들지 않는다.

class Profile(models.Model):
    # One to One Matching 이 프로파일의 주인이 누구인가
    # OneToOneField 는 장고에서 제공해주는 필드로 User 객체와 1대1 매칭을 하고 on_delete=models.CASCADE 이 부분은 해당 User 객체가
    # 삭제 되었을 때 Profile 객체도 같이 삭제된다는 의미이다.
    # related_name='profile' 이 부분은 profile 객체를 user 객체의 attribute 처럼 쓸 수 있게 연결해준다.
    # request.user.profile.nickname 이런식으로 사용 가능하다
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    # media root 가 BASE_DIR/media이므로 image는 BASE_DIR/media/profile 에 저장되고 이 필드는 null이 가능하다
    image = models.ImageField(upload_to='profile/', null=True)
    # Profile 객체들의 nickname 은 unique 해야하고 원래 이부분은 null=False 인게 맞는거같은데 가입할 때 nickname 만들라고 안헸으니 True 로 해놓고 나중에 만들라하자
    nickname = models.CharField(max_length=20, unique=True, null=True)
    message = models.CharField(max_length=100, null=True)

위와 같이 Profile 모델 클래스를 만들었다. 

Profile은 우리가 만든 클래스이고 때문에 Django에서 제공해주는 form이 없다.

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    image = models.ImageField(upload_to='profile/', null=True)
    nickname = models.CharField(max_length=20)
    
만약 이렇게 모델을 설정하면은 아래와같이 form 클래스도 만들어줘야하는데

class ProfileCreationForm(forms.Form):
    image = forms.ImageField(upload_to='profile/', null=True)
    nickname = forms.CharField(max_length=20)
    
Model Form을 활용하면 더 쉽게 할 수 있다
->
from django.forms import ModelForm

from profileapp.models import Profile


class ProfileCreationForm(ModelForm):
    class Meta:
        model = Profile
        fields = ['image', 'nickname', 'message']

이렇게 할 수 있다. Profile 클래스는 user라는 attribute도 가지고 있는데 이는 fields에 포함되어있지 않고 서버에서 처리해줄거다


