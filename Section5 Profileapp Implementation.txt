이번엔 프로필 앱을 만들거고 model form을 사용할거다. 지금은 detail 페이지에 들어가면 계정의 ID를 볼 수 있다. 이런 정보 노출은 해킹에 취약하므로 닉네임으로 바꿔줄거다. 
User 객체와 Profile 객체를 1대1 매칭시켜줄거다. 하나의 계정엔 하나의 프로필만 존재하게 만들자. 프로필에는 이미지 닉네임 그리고 상태 메세지 이렇게 구성해주자.
프로필은 계정을 삭제할 때 그 계정 객체가 없어질 때만 같이 없어지게 설정할것이므로 delete 뷰를 따로 만들지않고 detail 뷰도 프로필은 account detail view 가 품는 형식으로 만들것이나 
따로 만들지 않는다.

class Profile(models.Model):
    # One to One Matching 이 프로파일의 주인이 누구인가
    # OneToOneField 는 장고에서 제공해주는 필드로 User 객체와 1대1 매칭을 하고 on_delete=models.CASCADE 이 부분은 해당 User 객체가
    # 삭제 되었을 때 Profile 객체도 같이 삭제된다는 의미이다.
    # related_name='profile' 이 부분은 profile 객체를 user 객체의 attribute 처럼 쓸 수 있게 연결해준다.
    # request.user.profile.nickname 이런식으로 사용 가능하다
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    # media root 가 BASE_DIR/media이므로 image는 BASE_DIR/media/profile 에 저장되고 이 필드는 null이 가능하다
    image = models.ImageField(upload_to='profile/', null=True)
    # Profile 객체들의 nickname 은 unique 해야하고 원래 이부분은 null=False 인게 맞는거같은데 가입할 때 nickname 만들라고 안헸으니 True 로 해놓고 나중에 만들라하자
    nickname = models.CharField(max_length=20, unique=True, null=True)
    message = models.CharField(max_length=100, null=True)

위와 같이 Profile 모델 클래스를 만들었다. 

Profile은 우리가 만든 클래스이고 때문에 Django에서 제공해주는 form이 없다.

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    image = models.ImageField(upload_to='profile/', null=True)
    nickname = models.CharField(max_length=20)
    
만약 이렇게 모델을 설정하면은 아래와같이 form 클래스도 만들어줘야하는데

class ProfileCreationForm(forms.Form):
    image = forms.ImageField(upload_to='profile/', null=True)
    nickname = forms.CharField(max_length=20)
    
Model Form을 활용하면 더 쉽게 할 수 있다
->
from django.forms import ModelForm

from profileapp.models import Profile


class ProfileCreationForm(ModelForm):
    class Meta:
        model = Profile
        fields = ['image', 'nickname', 'message']

이렇게 할 수 있다. Profile 클래스는 user라는 attribute도 가지고 있는데 이는 fields에 포함되어있지 않고 서버에서 처리해줄거다

ProfileCreateView 도 만들어주고

class ProfileCreateView(CreateView):
    model = Profile
    context_object_name = 'target_profile'
    form_class = ProfileCreationForm
    success_url = reverse_lazy('accountapp:hello_world')
    template_name = 'profileapp/create.html'

create.html 도 만들어준다

{% extends 'base.html' %}
{% load django_bootstrap5 %}

{% block content %}
    <div style="text-align: center; max-width: 500px; margin: 4rem auto;">
        <div class="mb-4">
            <h4>Create Profile</h4>
        </div>
        <form action="{% url 'profileapp:create' %}" method="post">
            {% csrf_token %}
            {% bootstrap_form form %}
            <input type="submit" class="btn btn-dark rounded-pill col-6 mt-3">
        </form>
    </div>
{% endblock %}

그리고 서버를 켜고 실재로 profile을 만드려고 하면 이미지를 업로드하지 못한다. 여기서는 현재 form 태그에 문제가 있다.
<form action="{% url 'profileapp:create' %}" method="post"> -> <form action="{% url 'profileapp:create' %}" method="post" enctype="multipart/form-data">
이렇게 해줘야 이미지의 전송이 가능해진다. 그런데 이렇게 고쳐도 프로파일 생성시 에러가 나온다.
-> NOT NULL constraint failed: profileapp_profile.user_id
이렇게 뜬다

모델에서 user라는 필드가 분명히 있는데 form에서는 user라는 필드를 포함해주지 않았다. 그 이유는 forms.py에 만든 ProfileCreationForm을 이용한 form으로 user를 받게 되면은 유저가 자신의 계정과
매칭된 프로파일이 아닌 다른 계정과 매칭된 프로파일을 만들 수 있는 위험 요소가 있기 때문이다. 즉, html의 form 에서 유저를 총해 post 요청이 넘어갈 때 user 필드를 유저가 임의로 다른 값으로 조작해서
보내면 다른 계정의 유저가 자신이 아닌 다른 사람 계정의 프로파일을 조작할 수 있는것이다. 이를 클라이언트 사이드가 아니라 서버 내에서 구현하려고 우리가 앞에서 일부러 빼놨었다. CreateView 의 
form_valid 메소드를 이용하여 가능하다.
->
class ProfileCreateView(CreateView):
    model = Profile
    context_object_name = 'target_profile'
    form_class = ProfileCreationForm
    success_url = reverse_lazy('accountapp:hello_world')
    template_name = 'profileapp/create.html'

    def form_valid(self, form):
        temp_profile = form.save(commit=False) # 이거는 user를 추가하기 전의 임시 데이터라 commit (데이터에 저장)을 안한거라는데.... 근데  form 객체로 db에 저장이 되나?
        temp_profile.user = self.request.user
        temp_profile.save()
        return super().form_valid(form)

이렇게 하면 된다 메소드의 form 은 post 요청으로 넘어온 ProfileCreationForm 이 form을 말한다. 요청으로 넘어온 form 에는 user 필드가 없다 그래서 user 필드를 추가해주고 폼을 저정한다. 최종적
으로 그 폼을 반환해준다.

뷰 클래스 안의 메소드에 대해 말하자면 

def form_valid(self, form):
    return super().form_valid(form)

요렇게 메소드를 만들고 super().form_valid(form) 을 바로 리턴해주면 이건 메소드를 선언안해준것과 똑같다

def form_valid(self, form):
    -- 여기에다가 정책을 추가 -----
    return super().form_valid(form)

위처럼 리턴하기 전에 뭔가를 해야 우리가 새로운 동작을 추가해줄 수 있는것이다.


account detail 페이지에 프로파일 이미지를  추가하기 위해 html 파일에 다음의 파일을 추가한다
<img src="{{ target_user.profile.image.url }}" alt="">

그런데 아직 이미지가 안뜬다 왜일까?
-> routing 을 안해놔서 그렇다.
프로젝트앱의 urls.py 에서 media 에 관련된 세팅을 해줘야한다.

from django.conf import settings
from django.conf.urls.static import static
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("accounts/", include('accountapp.urls')),
    path("profiles/", include('profileapp.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

이렇게 바꿔준다






