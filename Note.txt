NGINX - 웹서버 소프트웨어. 클라이언트가 요청한 부분을 처리하는 서버 소프트웨어.
Docker - 배포에 있어서 가장 중요한 기술중 하나. 장고 서비스 하나가 도커의 하나의 컨테이너가 된다. 이렇게 만든 장고 컨테이너를 전체 도커 시스템에 밀어넣을것이다. 다른 도커 시스템으로는
마리아 DB 컨테이너, NGINX 서버 컨테이너, Certbot 컨테이너 등이있다.
VULTR(벌처) - 가상 서버 대여업체. 도커시스템이 완성되면 이것을 벌처에서 실재 서버를 빌려서 우리가 만든 도커 시스템을 올려 배포할것이다. 
django-admin -> 이 커맨드를 입력하면 django-admin 을 이용하여 할 수 있는 명령어들이 나온다. 
venv 가상 환경이 활성화 되어있을 시 프로젝트 디렉토리 말고도 모든 디렉토리에 venv가 적용된다

Pycharm 단축키 꿀팁
If there's an error in the code, pressing ⌥⏎ (option + enter) (macOS), or Alt+Enter (Windows/Linux), can suggest options that will make the code compile.
-> 만약 어떤 메소드가 아직 import 되지 않았다면 어떤 패키지에서 import 해야하는지도 suggest 함

gitgub 의 gitignore 레포지토리에서는 gitignore 파일을 위한 다양한 템플릿을 제공해준다 이 프로젝트에서는 Global 폴더의 Jetbrains.gitignore 템플릿을 사용하자 (Pycharm IDE 사용하기 때문)

프로젝트 앱의 settings.py 파일을 보면 다음과 같은 변수가 있다
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure--5ej32jnwnzn%jv$gb)z@=e1c@(lvtha!1&o9o9%2z4p4_n16s"

이 시크릿 키는 장고 애플리케이션에 하나 씩 배정되고 배포할 때 노출 시키면 안된다. 때문에 파일을 따로 만들어 이 키를 불러 오는 형식으로 다시 만들자. 이를 위한 라이브러리가 이미 존재한다. 
-> django-environ -> https://django-environ.readthedocs.io/en/latest/index.html

pip install django-environ 설치한다 그리고 다큐먼트에 써있는대로 해보자

Pycharm의 VCS 탭을 누르면 Enable Version Control Integration 이 보이는데 이를 이용하면 Git 을 활성화할 수 있다.

Hyper Text : 문서간 이동이 가능하다
Markup : 써 내려간다

Django Template

1. extend / include
- extends는 기본 템플릿을 만들어 놓고 그것을 가져와서 연정해서 내용을 채워나간다. include 우리가 만들고 있는 html 파일이 있다고 하면은 거기다가 조그만 조각같은 것을 가져와 템플릿 안에다가 박아 넣는다. 즉 extends로 뼈대를 가져오고 include 로 채워넣는다. 이렇게 나온 결과물이 response view.

2. template 파일의 경로 경로 디렉토리 설정은 settings.py 에서 할 수 있다. -> "DIRS": [os.path.join(BASE_DIR, 'templates')],

3. include 로 가지고올 부분은 파일을 따로 만들어준다 ex) head.html

4. div 는 가능한 폭을 모두 가져가는 태그라고 생각하면 된다 

5. Pycharm 에서 option key + 커서로 지정한 부분들은 동시에 작업이 가능하다 (꿀팁!)


질문. 9강 들은 후 의문점이 있어서 질문드립니다. settings.py 파일에 분명 프로젝트 루트의 templates 폴더로 기본 템플릿 디렉토리 경로를 설정하였는데 ("DIRS": [os.path.join(BASE_DIR, 'templates')],)  accountapp 디렉토리의 view.py 파일에서 html를 렌더링 할 때 (return render(request, 'accountapp/hello_world.html')) 어떻게 'accountapp/hello_world.html' 이라는 input 으로 accountapp/templates/accountapp 경로에 있는 hello_world.html 파일에 접근할 수 있나요?

Chatgpt 답: 

In Django, the web framework looks for templates in a specified set of directories, which are defined in the TEMPLATES setting in the project's settings.py file. By default, Django looks for templates in the templates/ directory of each installed application.

Here's how Django finds the template path:

First, Django looks for the APP_DIRS setting in the TEMPLATES setting. If APP_DIRS is set to True, Django will look for templates in the templates/ directory of each installed application.

If APP_DIRS is False, Django will look for templates in the directories specified in the DIRS setting in the TEMPLATES setting.

If neither APP_DIRS nor DIRS is specified, Django will use a default set of directories: os.path.join(BASE_DIR, 'templates').

BASE_DIR is a setting that specifies the base directory of the project. By default, it is the directory containing the project's settings.py file.

Once Django has determined the set of directories to look for templates, it searches for the template file in each directory in order, looking for a file with the specified name and file extension. If it finds a match, it uses that template to render the response.

In addition to the default behavior, you can also customize the template loading process by writing your own template loaders, which can load templates from alternative sources such as a database or a remote file system.

질문. Can you explain this python code Path(__file__).resolve().parent.parent

Chatgpt 답:
This Python code uses the pathlib module to obtain the path of the current file's parent directory's parent directory. Here's how it works:

Path(__file__) creates a Path object that represents the path of the current file.
.resolve() resolves any symbolic links, references to parent directories (i.e., ..), and returns an absolute path. This ensures that the path is fully resolved and not a relative path that depends on the current working directory.
.parent returns the parent directory of the resolved path, which is the directory containing the current file.
.parent is called again to obtain the parent directory of the directory containing the current file, which is the directory containing the parent directory.
So, the resulting expression Path(__file__).resolve().parent.parent gives you the path of the parent directory's parent directory of the current file.

This is a useful technique to locate files relative to the current file's location, especially if you need to access other files in the same directory as the current file or in a parent directory.


부트스트랩은 html 의 스타일을 그럴듯하게 만들어주는 라이브러리
get started -> https://getbootstrap.com/docs/5.3/getting-started/introduction/

Google Fonts -> 폰트 링크들을 받을 수 있다
https://fonts.google.com/?preview.text=Jake%27s%20Home&preview.text_type=custom

Static
settings.py 파일로 가서 STATIC_URL 라인 밑에 다음과 같이 STATIC_ROOT 를 추가하자 
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
나중에 python3 manage.py collectstatic 이라는 명령어를 통해 STATIC_ROOT로 프로젝트 안의 모든 static 파일들을 모아준다.

변수나 함수를 지정한 뒤 command key + B 를 누르면 해당 변수나 함수가 처음 선언되어 있는 곳으로 가게 된다

이 프로젝트에서는 특정 앱에 종속되어있지 않은 프로젝트 전체에서 관리할 수 있는 static 폴더를 따로 만든다.
장고 문서에 보면 managing static files 과 관련한 내용이 있다 -> https://docs.djangoproject.com/en/4.1/howto/static-files/
Static 파일들의 디렉토리를 따로 지정해 줄 수 있다 보통 앱 내부의 static 폴더를 찾는데 임의적으로 static 파일 폴더를 추가해주므로써 앱에 종속되지 않은 static 폴더를 만든다
settings.py 에 다음과 같이 추가해주자 -> 
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

settings.py 파일의 STATIC_URL = "static/" 이 라인은 무엇을 의미할까? 개발 서버를 켜고 head 부분으로 가보자 개발자 도구를 열고 코드를 보자
소스 코드의 <link rel="stylesheet" type="text/css" href="{% static 'base.css' %}"> 부분은 <link rel="stylesheet" type="text/css" href="/static/base.css">
이렇게 바뀌어 있다 STATIC_URL 변수는 이렇게 웹페이지를 만들 실행할 때 static 파일들의 경로 URL(?)을 만드는데 사용된다. 만약 STATIC_URL 값을 test/ 로 바꾸면 URL도 /test/base.css로 바뀌는것이다.

CSS Nutshell
1. Display Attribute : 모든 tag 들은 display attribute을 가진다. 네 가지 속성이 있다 block, inline, inline-block 그리고 none. block 속성은 태그가 부모 태그의 최대 너비를 가져가
면서 블록 모양의 형태를 가진다. 높이는 따로 설정하지 않는 이상 기본적으로 설정된 값(?) 이다. div 태그는 display 속성 값을 따로 설정해주지 않으면 block 속성이 default 로 설정된다. inline 속성
은 만약 글씨가 있다면 그 글씨의 높이만큼만 그리고 한 줄 내의 일정부분만을 형태로 가져간다. 만약 같은 레벨의 block 속성의 태그가 여러개 나열되어있다면 실재 웹페이지 화면에서는 해당 태그들이 위에서 밑으로 
하나 씩 나열될것이다 (block 속성은 부모 태그의 최대 너비를 가지기 때문) 하지만 inline 속성의 태그들이 나란히 나열되어있다면 실재 웹페이지 화면에서는 해당 태그들이 한 줄로 나란히 구성될 수 있다. 
(inline 속성은 한 줄의 일정 부분만을 가져가기 때문. 최대 너비 x) span 태그는 기본 display 속성값이 inline 이다. inline-block 속성은 block 같은 높이를 가지지만 inline 처럼 한 줄의 일정 
부분만을 너비로 가져간다 때문에 inline 처럼 옆으로 쌓일 수 있다. none 속성은 아무것도 없는거다. 코드 상에는 존재하나 시각화 될 때 존재하지 않는 취급(?)를 당한다. 때문에 화면에 안나온다.

2. Visibility Attribute : visibility의 hidden 속성은 display의 none 속성과 비슷해 보이지만 다른 점이 있다. none 이 아예 존재하지 않는 취급을 당하는것과 달리 hidden은 그 위치에 존재
를 하지만 마치 투명한것처럼 보이지 않는것이다. 예를들어 두개의 한 라인에 inline-block 속성의 태그가 나란히 있다고 해보자. 화면상에서는 [block block] 이렇게 보일것이다. 이번엔 왼쪽 태그가 none 
의 속성을 가지고 있다고 해보자. [block      ] 이렇게 보일것이다. 왼쪽의 태그는 존재하지 않는것이므로 오른쪽의 블락이 왼쪽으로 오게된다. 이번에는 왼쪽의 태그가 hidden 속성을 가지고 있다고 해보자. 
[      block] 이렇게 보일것이다. 왼쪽의 태그는 보이지 않을 뿐 존재 한다. 오른쪽 태그는 여전히 왼쪽 태그가 차지하는 공간 뒤에 오게된다. visibility 다른 속성들도 있나? 

3. Size Attribute : 태그들의 너비 높이 등의 크기를 지정할 때 단위가 네가지가 있다. px em rem % 이다. 이 프로젝트에서는 거의 모든 경우 rem 을 쓸것이다. 왜인가? font size 와 연관이 있다.
우리는 이 사이트를 반응형으로 만들것이다. (responsive) 우리 기기의 스크린 크기에 대해 통제력을 가져야한다. px 은 부모 태그에 관계 없이 고정된 값을 준다. 어떤 자식 태그가 높이 100px 너비 100px 
라고 하면 부모 태그와 관련 없이 이 값 고정이다. em 단위는 부모 태그의 크기에 비례해서 자식 태그의 크기가 정해진다. 하지만 부모 태그가 여러개인 nested 된 경우 부모 태그들이 커지는 비율의 곱 만큼 자식
태그가 커지게된다. 예를 들어 부모태그1 이 2배 커지고 부모태크2가 3배 커지면 자식 태그는 6배 커지게 되는것이다. 때문에 em을 쓰는 경우 계산할 것이 많아서 통제하기가 어려워 우리는 안쓸거다.
rem 은 rem을 사용하는 모든 태그가 root html 태그에 비례해서 크기가 정해진다. (root html의 default font size 는 대게 16px이다 즉 1rem = 16px) 마지막으로 %는 바로 위의 부모 태그에만 비례해서 크기가 정해진다. 바로 위의 부모 태그 위의 부모태그가 어떻게 변하든 관계 없다. 우리는 거의 rem과 %만 쓸것이다.

style을 정하는 방법은 세가지가 있다.
1. css 파일에 따로 쓴 후 html 파일에서 불러오는 방법
2. html 파일 내에 <style></style> 태그 안에 쓰는 방법
3. html 파일에서 스타일이 적용되는 태그에 직접 스타일을 입히는 방법

하지만 특정 태그에 위의 세 가지 방법으로 모두 같은 계열의 스타일이 지정되어 있는 경우가 있다. 이럴 때는 해당 태그에 직접 입혀진 스타일을 우선순위로 적용하고 (3번) html 파일 내의 스타일 태그에 지정되어
있는 스타일을 적용한다. (2번) 마지막으로 해당 태그의 스타일이 css 파일에만 명시되어 있을 때만 css 파일의 스타일을 적용한다. (1번)

git reset --hard HEAD
-> 가장 최근에 커밋했던 때로 되돌아간다.

Connecting model with database
- python manage.py makemigrations 우리가 models.py 에다가 쓰는 내용을 db와 연동시킬 python 파일로 만들어주는 작업을 한다.
accocuntapp 의 models.py 에 가서 클래스를 하나 작성해보자. 클래스 하나가 db 에서 테이블 하나가 된다. 클래스 작성 후 위의 makemigrations 명령어를 입력해보자. 

Migrations for 'accountapp':
  accountapp/migrations/0001_initial.py
    - Create model HelloWorld

위처럼 마이그레이션 파일이 (마이그레이션 파일들은 절대로 맘대로 지우면 안된다) 만들어지고 모델을 만들었다고 뜬다. 하지만 이 파일을 만들었다고 자동으로 db와 연동이 되는 것은 아니고 연동 시켜주는 다른 명령
어를 실행해야한다. -> python manage.py migrate 이러면 db에 적용이 되는것이다.

settings.py 에 가면 db에 대한 정보를 볼 수 있다. 

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

장고가 기본적으로 제공해주는 sqlite3 을 쓰며 db 파일은 BASE_DIR 디렉토리에 db.sqlite3 이라는 이름의 파일로 존재한다는 뜻. 나중에 배포를 할 때는 다른 db 을 쓸거지만 지금은 sqlite3 로 진행
하는데에 무리가 없다.

HTTP Protocol
대표적으로 GET과 POST 가 있다. GET 은 주로 조회를 할 때 쓰인다. 주소 안에서 ? 뒤에 추가적인 parameter를 넣어서 보내준다. POST 같은 경우 서버 내에 어떤 정보를 새로 만들거나 수정할 때 쓰인다.
GET처럼 주소 안에 parameter를 넣어 보내지 않고 어떤 BODY 라는 응답(?) 내부에 있는 몸통에다 데이터를 넣어 보낸다. HTTP는 이 BODY 안에 넣어 보내는데 암호화되어있지 않다. 그래서 중간에 가로채서 볼 
수 있다. 나중에 암호화하는 법도 배울거다. HTTPS는 암호화되어있다. GET은 우리가 주소에 넣어 보내면 자동적으로 보내지지만 POST는 따로 설정을 해줘야한다. POST를 사용하기 위해서는 html안에 form을 만
들어줘야한다.
->
        <form action="/account/hello_world" method="post">
            <input type="submit" class="btn btn-primary" value="POST">
        </form>

이렇게 하면 화면에 버튼이 생성된다. 하지만 버튼을 누르면 뭔가 잘못된거처럼 나온다. django 에서는 post 방식으로 서버에 요청을 보낼 때는 csrf 토큰이라는 것을 항상 form 안에 명시해줘야한다.
->
        <form action="/account/hello_world" method="post">
            {% csrf_token %}
            <input type="submit" class="btn btn-primary" value="POST">
        </form>

이러면 버튼을 눌렀을 때 에러 화면이 뜨지는 않는다. 하지만 view 에서 이런 post 요청을 처리하는 로직을 만들지 않았기 때문에 버튼을 눌렀을 때 딱히 일어나는것은 없다.
